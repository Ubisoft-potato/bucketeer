fullnameOverride: "web-gateway"
namespace: default
tls:
  bucketeerJP:
    secrets:
    cert:
    key:
  service:
    secret:
    cert:
    key:
envoy:
  image:
    repository: ghcr.io/bucketeer-io/bucketeer-envoy
    tag: v1.26.2
    pullPolicy: IfNotPresent
  serviceCluster: bucketeer
  adminPort: 8001
  eventcounterDescriptor: 
  autoopsDescriptor: 
  authDescriptor: CsgCChZwcm90by9hdXRoL3Rva2VuLnByb3RvEg5idWNrZXRlZXIuYXV0aCKhAQoFVG9rZW4SIQoMYWNjZXNzX3Rva2VuGAEgASgJUgthY2Nlc3NUb2tlbhIdCgp0b2tlbl90eXBlGAIgASgJUgl0b2tlblR5cGUSIwoNcmVmcmVzaF90b2tlbhgDIAEoCVIMcmVmcmVzaFRva2VuEhYKBmV4cGlyeRgEIAEoA1IGZXhwaXJ5EhkKCGlkX3Rva2VuGAUgASgJUgdpZFRva2VuIkIKDklEVG9rZW5TdWJqZWN0EhcKB3VzZXJfaWQYASABKAlSBnVzZXJJZBIXCgdjb25uX2lkGAIgASgJUgZjb25uSWRCLlosZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2F1dGhiBnByb3RvMwrbBgoYcHJvdG8vYXV0aC9zZXJ2aWNlLnByb3RvEg5idWNrZXRlZXIuYXV0aBoWcHJvdG8vYXV0aC90b2tlbi5wcm90byJQChVHZXRBdXRoQ29kZVVSTFJlcXVlc3QSFAoFc3RhdGUYASABKAlSBXN0YXRlEiEKDHJlZGlyZWN0X3VybBgCIAEoCVILcmVkaXJlY3RVcmwiKgoWR2V0QXV0aENvZGVVUkxSZXNwb25zZRIQCgN1cmwYASABKAlSA3VybCJNChRFeGNoYW5nZVRva2VuUmVxdWVzdBISCgRjb2RlGAEgASgJUgRjb2RlEiEKDHJlZGlyZWN0X3VybBgCIAEoCVILcmVkaXJlY3RVcmwiRAoVRXhjaGFuZ2VUb2tlblJlc3BvbnNlEisKBXRva2VuGAEgASgLMhUuYnVja2V0ZWVyLmF1dGguVG9rZW5SBXRva2VuIl0KE1JlZnJlc2hUb2tlblJlcXVlc3QSIwoNcmVmcmVzaF90b2tlbhgBIAEoCVIMcmVmcmVzaFRva2VuEiEKDHJlZGlyZWN0X3VybBgCIAEoCVILcmVkaXJlY3RVcmwiQwoUUmVmcmVzaFRva2VuUmVzcG9uc2USKwoFdG9rZW4YASABKAsyFS5idWNrZXRlZXIuYXV0aC5Ub2tlblIFdG9rZW4ypwIKC0F1dGhTZXJ2aWNlEl8KDkdldEF1dGhDb2RlVVJMEiUuYnVja2V0ZWVyLmF1dGguR2V0QXV0aENvZGVVUkxSZXF1ZXN0GiYuYnVja2V0ZWVyLmF1dGguR2V0QXV0aENvZGVVUkxSZXNwb25zZRJcCg1FeGNoYW5nZVRva2VuEiQuYnVja2V0ZWVyLmF1dGguRXhjaGFuZ2VUb2tlblJlcXVlc3QaJS5idWNrZXRlZXIuYXV0aC5FeGNoYW5nZVRva2VuUmVzcG9uc2USWQoMUmVmcmVzaFRva2VuEiMuYnVja2V0ZWVyLmF1dGguUmVmcmVzaFRva2VuUmVxdWVzdBokLmJ1Y2tldGVlci5hdXRoLlJlZnJlc2hUb2tlblJlc3BvbnNlQi5aLGdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9hdXRoYgZwcm90bzM=
  notificationDescriptor: CvADCiJwcm90by9ub3RpZmljYXRpb24vcmVjaXBpZW50LnByb3RvEhZidWNrZXRlZXIubm90aWZpY2F0aW9uIrcCCglSZWNpcGllbnQSOgoEdHlwZRgBIAEoDjImLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uUmVjaXBpZW50LlR5cGVSBHR5cGUSZQoXc2xhY2tfY2hhbm5lbF9yZWNpcGllbnQYAiABKAsyLS5idWNrZXRlZXIubm90aWZpY2F0aW9uLlNsYWNrQ2hhbm5lbFJlY2lwaWVudFIVc2xhY2tDaGFubmVsUmVjaXBpZW50EkYKCGxhbmd1YWdlGAMgASgOMiouYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5SZWNpcGllbnQuTGFuZ3VhZ2VSCGxhbmd1YWdlIhgKBFR5cGUSEAoMU2xhY2tDaGFubmVsEAAiJQoITGFuZ3VhZ2USCwoHRU5HTElTSBAAEgwKCEpBUEFORVNFEAEiOAoVU2xhY2tDaGFubmVsUmVjaXBpZW50Eh8KC3dlYmhvb2tfdXJsGAEgASgJUgp3ZWJob29rVXJsQjZaNGdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9ub3RpZmljYXRpb25iBnByb3RvMwq/BwolcHJvdG8vbm90aWZpY2F0aW9uL3N1YnNjcmlwdGlvbi5wcm90bxIWYnVja2V0ZWVyLm5vdGlmaWNhdGlvbhoicHJvdG8vbm90aWZpY2F0aW9uL3JlY2lwaWVudC5wcm90byKZBgoMU3Vic2NyaXB0aW9uEg4KAmlkGAEgASgJUgJpZBIdCgpjcmVhdGVkX2F0GAIgASgDUgljcmVhdGVkQXQSHQoKdXBkYXRlZF9hdBgDIAEoA1IJdXBkYXRlZEF0EhoKCGRpc2FibGVkGAQgASgIUghkaXNhYmxlZBJSCgxzb3VyY2VfdHlwZXMYBSADKA4yLy5idWNrZXRlZXIubm90aWZpY2F0aW9uLlN1YnNjcmlwdGlvbi5Tb3VyY2VUeXBlUgtzb3VyY2VUeXBlcxI/CglyZWNpcGllbnQYBiABKAsyIS5idWNrZXRlZXIubm90aWZpY2F0aW9uLlJlY2lwaWVudFIJcmVjaXBpZW50EhIKBG5hbWUYByABKAlSBG5hbWUi9QMKClNvdXJjZVR5cGUSGAoURE9NQUlOX0VWRU5UX0ZFQVRVUkUQABIVChFET01BSU5fRVZFTlRfR09BTBABEhsKF0RPTUFJTl9FVkVOVF9FWFBFUklNRU5UEAISGAoURE9NQUlOX0VWRU5UX0FDQ09VTlQQAxIXChNET01BSU5fRVZFTlRfQVBJS0VZEAQSGAoURE9NQUlOX0VWRU5UX1NFR01FTlQQBRIcChhET01BSU5fRVZFTlRfRU5WSVJPTk1FTlQQBhIeChpET01BSU5fRVZFTlRfQURNSU5fQUNDT1VOVBAHEh0KGURPTUFJTl9FVkVOVF9BVVRPT1BTX1JVTEUQCBIVChFET01BSU5fRVZFTlRfUFVTSBAJEh0KGURPTUFJTl9FVkVOVF9TVUJTQ1JJUFRJT04QChIjCh9ET01BSU5fRVZFTlRfQURNSU5fU1VCU0NSSVBUSU9OEAsSGAoURE9NQUlOX0VWRU5UX1BST0pFQ1QQDBIYChRET01BSU5fRVZFTlRfV0VCSE9PSxANEiQKIERPTUFJTl9FVkVOVF9QUk9HUkVTU0lWRV9ST0xMT1VUEA4SEQoNRkVBVFVSRV9TVEFMRRBkEhcKEkVYUEVSSU1FTlRfUlVOTklORxDIARIOCglNQVVfQ09VTlQQrAJCNlo0Z2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL25vdGlmaWNhdGlvbmIGcHJvdG8zCtoKCiBwcm90by9ub3RpZmljYXRpb24vY29tbWFuZC5wcm90bxIWYnVja2V0ZWVyLm5vdGlmaWNhdGlvbholcHJvdG8vbm90aWZpY2F0aW9uL3N1YnNjcmlwdGlvbi5wcm90bxoicHJvdG8vbm90aWZpY2F0aW9uL3JlY2lwaWVudC5wcm90byLJAQoeQ3JlYXRlQWRtaW5TdWJzY3JpcHRpb25Db21tYW5kElIKDHNvdXJjZV90eXBlcxgBIAMoDjIvLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uLlNvdXJjZVR5cGVSC3NvdXJjZVR5cGVzEj8KCXJlY2lwaWVudBgCIAEoCzIhLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uUmVjaXBpZW50UglyZWNpcGllbnQSEgoEbmFtZRgDIAEoCVIEbmFtZSJ8CiZBZGRBZG1pblN1YnNjcmlwdGlvblNvdXJjZVR5cGVzQ29tbWFuZBJSCgxzb3VyY2VfdHlwZXMYASADKA4yLy5idWNrZXRlZXIubm90aWZpY2F0aW9uLlN1YnNjcmlwdGlvbi5Tb3VyY2VUeXBlUgtzb3VyY2VUeXBlcyJ/CilEZWxldGVBZG1pblN1YnNjcmlwdGlvblNvdXJjZVR5cGVzQ29tbWFuZBJSCgxzb3VyY2VfdHlwZXMYASADKA4yLy5idWNrZXRlZXIubm90aWZpY2F0aW9uLlN1YnNjcmlwdGlvbi5Tb3VyY2VUeXBlUgtzb3VyY2VUeXBlcyIgCh5FbmFibGVBZG1pblN1YnNjcmlwdGlvbkNvbW1hbmQiIQofRGlzYWJsZUFkbWluU3Vic2NyaXB0aW9uQ29tbWFuZCIgCh5EZWxldGVBZG1pblN1YnNjcmlwdGlvbkNvbW1hbmQiNAoeUmVuYW1lQWRtaW5TdWJzY3JpcHRpb25Db21tYW5kEhIKBG5hbWUYASABKAlSBG5hbWUixAEKGUNyZWF0ZVN1YnNjcmlwdGlvbkNvbW1hbmQSUgoMc291cmNlX3R5cGVzGAEgAygOMi8uYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb24uU291cmNlVHlwZVILc291cmNlVHlwZXMSPwoJcmVjaXBpZW50GAIgASgLMiEuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5SZWNpcGllbnRSCXJlY2lwaWVudBISCgRuYW1lGAMgASgJUgRuYW1lImsKFUFkZFNvdXJjZVR5cGVzQ29tbWFuZBJSCgxzb3VyY2VfdHlwZXMYASADKA4yLy5idWNrZXRlZXIubm90aWZpY2F0aW9uLlN1YnNjcmlwdGlvbi5Tb3VyY2VUeXBlUgtzb3VyY2VUeXBlcyJuChhEZWxldGVTb3VyY2VUeXBlc0NvbW1hbmQSUgoMc291cmNlX3R5cGVzGAEgAygOMi8uYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb24uU291cmNlVHlwZVILc291cmNlVHlwZXMiGwoZRW5hYmxlU3Vic2NyaXB0aW9uQ29tbWFuZCIcChpEaXNhYmxlU3Vic2NyaXB0aW9uQ29tbWFuZCIbChlEZWxldGVTdWJzY3JpcHRpb25Db21tYW5kIi8KGVJlbmFtZVN1YnNjcmlwdGlvbkNvbW1hbmQSEgoEbmFtZRgBIAEoCVIEbmFtZUI2WjRnaXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vbm90aWZpY2F0aW9uYgZwcm90bzMKhgQKHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxIPZ29vZ2xlLnByb3RvYnVmIiMKC0RvdWJsZVZhbHVlEhQKBXZhbHVlGAEgASgBUgV2YWx1ZSIiCgpGbG9hdFZhbHVlEhQKBXZhbHVlGAEgASgCUgV2YWx1ZSIiCgpJbnQ2NFZhbHVlEhQKBXZhbHVlGAEgASgDUgV2YWx1ZSIjCgtVSW50NjRWYWx1ZRIUCgV2YWx1ZRgBIAEoBFIFdmFsdWUiIgoKSW50MzJWYWx1ZRIUCgV2YWx1ZRgBIAEoBVIFdmFsdWUiIwoLVUludDMyVmFsdWUSFAoFdmFsdWUYASABKA1SBXZhbHVlIiEKCUJvb2xWYWx1ZRIUCgV2YWx1ZRgBIAEoCFIFdmFsdWUiIwoLU3RyaW5nVmFsdWUSFAoFdmFsdWUYASABKAlSBXZhbHVlIiIKCkJ5dGVzVmFsdWUSFAoFdmFsdWUYASABKAxSBXZhbHVlQoMBChNjb20uZ29vZ2xlLnByb3RvYnVmQg1XcmFwcGVyc1Byb3RvUAFaMWdvb2dsZS5nb2xhbmcub3JnL3Byb3RvYnVmL3R5cGVzL2tub3duL3dyYXBwZXJzcGL4AQGiAgNHUEKqAh5Hb29nbGUuUHJvdG9idWYuV2VsbEtub3duVHlwZXNiBnByb3RvMwrAOQogcHJvdG8vbm90aWZpY2F0aW9uL3NlcnZpY2UucHJvdG8SFmJ1Y2tldGVlci5ub3RpZmljYXRpb24aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxolcHJvdG8vbm90aWZpY2F0aW9uL3N1YnNjcmlwdGlvbi5wcm90bxogcHJvdG8vbm90aWZpY2F0aW9uL2NvbW1hbmQucHJvdG8iLQobR2V0QWRtaW5TdWJzY3JpcHRpb25SZXF1ZXN0Eg4KAmlkGAEgASgJUgJpZCJoChxHZXRBZG1pblN1YnNjcmlwdGlvblJlc3BvbnNlEkgKDHN1YnNjcmlwdGlvbhgBIAEoCzIkLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uUgxzdWJzY3JpcHRpb24itwQKHUxpc3RBZG1pblN1YnNjcmlwdGlvbnNSZXF1ZXN0EhsKCXBhZ2Vfc2l6ZRgBIAEoA1IIcGFnZVNpemUSFgoGY3Vyc29yGAIgASgJUgZjdXJzb3ISUgoMc291cmNlX3R5cGVzGAMgAygOMi8uYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb24uU291cmNlVHlwZVILc291cmNlVHlwZXMSWAoIb3JkZXJfYnkYBCABKA4yPS5idWNrZXRlZXIubm90aWZpY2F0aW9uLkxpc3RBZG1pblN1YnNjcmlwdGlvbnNSZXF1ZXN0Lk9yZGVyQnlSB29yZGVyQnkSbQoPb3JkZXJfZGlyZWN0aW9uGAUgASgOMkQuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5MaXN0QWRtaW5TdWJzY3JpcHRpb25zUmVxdWVzdC5PcmRlckRpcmVjdGlvblIOb3JkZXJEaXJlY3Rpb24SJQoOc2VhcmNoX2tleXdvcmQYBiABKAlSDXNlYXJjaEtleXdvcmQSNgoIZGlzYWJsZWQYByABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlUghkaXNhYmxlZCJACgdPcmRlckJ5EgsKB0RFRkFVTFQQABIICgROQU1FEAESDgoKQ1JFQVRFRF9BVBACEg4KClVQREFURURfQVQQAyIjCg5PcmRlckRpcmVjdGlvbhIHCgNBU0MQABIICgRERVNDEAEipQEKHkxpc3RBZG1pblN1YnNjcmlwdGlvbnNSZXNwb25zZRJKCg1zdWJzY3JpcHRpb25zGAEgAygLMiQuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb25SDXN1YnNjcmlwdGlvbnMSFgoGY3Vyc29yGAIgASgJUgZjdXJzb3ISHwoLdG90YWxfY291bnQYAyABKANSCnRvdGFsQ291bnQirwEKJExpc3RFbmFibGVkQWRtaW5TdWJzY3JpcHRpb25zUmVxdWVzdBIbCglwYWdlX3NpemUYASABKANSCHBhZ2VTaXplEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yElIKDHNvdXJjZV90eXBlcxgDIAMoDjIvLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uLlNvdXJjZVR5cGVSC3NvdXJjZVR5cGVzIosBCiVMaXN0RW5hYmxlZEFkbWluU3Vic2NyaXB0aW9uc1Jlc3BvbnNlEkoKDXN1YnNjcmlwdGlvbnMYASADKAsyJC5idWNrZXRlZXIubm90aWZpY2F0aW9uLlN1YnNjcmlwdGlvblINc3Vic2NyaXB0aW9ucxIWCgZjdXJzb3IYAiABKAlSBmN1cnNvciJyCh5DcmVhdGVBZG1pblN1YnNjcmlwdGlvblJlcXVlc3QSUAoHY29tbWFuZBgBIAEoCzI2LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uQ3JlYXRlQWRtaW5TdWJzY3JpcHRpb25Db21tYW5kUgdjb21tYW5kIiEKH0NyZWF0ZUFkbWluU3Vic2NyaXB0aW9uUmVzcG9uc2UiggEKHkRlbGV0ZUFkbWluU3Vic2NyaXB0aW9uUmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSUAoHY29tbWFuZBgCIAEoCzI2LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRGVsZXRlQWRtaW5TdWJzY3JpcHRpb25Db21tYW5kUgdjb21tYW5kIiEKH0RlbGV0ZUFkbWluU3Vic2NyaXB0aW9uUmVzcG9uc2UiggEKHkVuYWJsZUFkbWluU3Vic2NyaXB0aW9uUmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSUAoHY29tbWFuZBgCIAEoCzI2LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRW5hYmxlQWRtaW5TdWJzY3JpcHRpb25Db21tYW5kUgdjb21tYW5kIiEKH0VuYWJsZUFkbWluU3Vic2NyaXB0aW9uUmVzcG9uc2UihAEKH0Rpc2FibGVBZG1pblN1YnNjcmlwdGlvblJlcXVlc3QSDgoCaWQYASABKAlSAmlkElEKB2NvbW1hbmQYAiABKAsyNy5idWNrZXRlZXIubm90aWZpY2F0aW9uLkRpc2FibGVBZG1pblN1YnNjcmlwdGlvbkNvbW1hbmRSB2NvbW1hbmQiIgogRGlzYWJsZUFkbWluU3Vic2NyaXB0aW9uUmVzcG9uc2UipAMKHlVwZGF0ZUFkbWluU3Vic2NyaXB0aW9uUmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSdwoYYWRkX3NvdXJjZV90eXBlc19jb21tYW5kGAIgASgLMj4uYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5BZGRBZG1pblN1YnNjcmlwdGlvblNvdXJjZVR5cGVzQ29tbWFuZFIVYWRkU291cmNlVHlwZXNDb21tYW5kEoABChtkZWxldGVfc291cmNlX3R5cGVzX2NvbW1hbmQYAyABKAsyQS5idWNrZXRlZXIubm90aWZpY2F0aW9uLkRlbGV0ZUFkbWluU3Vic2NyaXB0aW9uU291cmNlVHlwZXNDb21tYW5kUhhkZWxldGVTb3VyY2VUeXBlc0NvbW1hbmQSdgobcmVuYW1lX3N1YnNjcmlwdGlvbl9jb21tYW5kGAQgASgLMjYuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5SZW5hbWVBZG1pblN1YnNjcmlwdGlvbkNvbW1hbmRSGXJlbmFtZVN1YnNjcmlwdGlvbkNvbW1hbmQiIQofVXBkYXRlQWRtaW5TdWJzY3JpcHRpb25SZXNwb25zZSJdChZHZXRTdWJzY3JpcHRpb25SZXF1ZXN0EjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgBIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2USDgoCaWQYAiABKAlSAmlkImMKF0dldFN1YnNjcmlwdGlvblJlc3BvbnNlEkgKDHN1YnNjcmlwdGlvbhgBIAEoCzIkLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uUgxzdWJzY3JpcHRpb24i3QQKGExpc3RTdWJzY3JpcHRpb25zUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEhsKCXBhZ2Vfc2l6ZRgCIAEoA1IIcGFnZVNpemUSFgoGY3Vyc29yGAMgASgJUgZjdXJzb3ISUgoMc291cmNlX3R5cGVzGAQgAygOMi8uYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb24uU291cmNlVHlwZVILc291cmNlVHlwZXMSUwoIb3JkZXJfYnkYBSABKA4yOC5idWNrZXRlZXIubm90aWZpY2F0aW9uLkxpc3RTdWJzY3JpcHRpb25zUmVxdWVzdC5PcmRlckJ5UgdvcmRlckJ5EmgKD29yZGVyX2RpcmVjdGlvbhgGIAEoDjI/LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uTGlzdFN1YnNjcmlwdGlvbnNSZXF1ZXN0Lk9yZGVyRGlyZWN0aW9uUg5vcmRlckRpcmVjdGlvbhIlCg5zZWFyY2hfa2V5d29yZBgHIAEoCVINc2VhcmNoS2V5d29yZBI2CghkaXNhYmxlZBgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVSCGRpc2FibGVkIkAKB09yZGVyQnkSCwoHREVGQVVMVBAAEggKBE5BTUUQARIOCgpDUkVBVEVEX0FUEAISDgoKVVBEQVRFRF9BVBADIiMKDk9yZGVyRGlyZWN0aW9uEgcKA0FTQxAAEggKBERFU0MQASKgAQoZTGlzdFN1YnNjcmlwdGlvbnNSZXNwb25zZRJKCg1zdWJzY3JpcHRpb25zGAEgAygLMiQuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb25SDXN1YnNjcmlwdGlvbnMSFgoGY3Vyc29yGAIgASgJUgZjdXJzb3ISHwoLdG90YWxfY291bnQYAyABKANSCnRvdGFsQ291bnQi3wEKH0xpc3RFbmFibGVkU3Vic2NyaXB0aW9uc1JlcXVlc3QSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAEgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRIbCglwYWdlX3NpemUYAiABKANSCHBhZ2VTaXplEhYKBmN1cnNvchgDIAEoCVIGY3Vyc29yElIKDHNvdXJjZV90eXBlcxgEIAMoDjIvLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uU3Vic2NyaXB0aW9uLlNvdXJjZVR5cGVSC3NvdXJjZVR5cGVzIoYBCiBMaXN0RW5hYmxlZFN1YnNjcmlwdGlvbnNSZXNwb25zZRJKCg1zdWJzY3JpcHRpb25zGAEgAygLMiQuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5TdWJzY3JpcHRpb25SDXN1YnNjcmlwdGlvbnMSFgoGY3Vyc29yGAIgASgJUgZjdXJzb3IinQEKGUNyZWF0ZVN1YnNjcmlwdGlvblJlcXVlc3QSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAEgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRJLCgdjb21tYW5kGAIgASgLMjEuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5DcmVhdGVTdWJzY3JpcHRpb25Db21tYW5kUgdjb21tYW5kIhwKGkNyZWF0ZVN1YnNjcmlwdGlvblJlc3BvbnNlIq0BChlEZWxldGVTdWJzY3JpcHRpb25SZXF1ZXN0EjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgBIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2USDgoCaWQYAiABKAlSAmlkEksKB2NvbW1hbmQYAyABKAsyMS5idWNrZXRlZXIubm90aWZpY2F0aW9uLkRlbGV0ZVN1YnNjcmlwdGlvbkNvbW1hbmRSB2NvbW1hbmQiHAoaRGVsZXRlU3Vic2NyaXB0aW9uUmVzcG9uc2UirQEKGUVuYWJsZVN1YnNjcmlwdGlvblJlcXVlc3QSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAEgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRIOCgJpZBgCIAEoCVICaWQSSwoHY29tbWFuZBgDIAEoCzIxLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRW5hYmxlU3Vic2NyaXB0aW9uQ29tbWFuZFIHY29tbWFuZCIcChpFbmFibGVTdWJzY3JpcHRpb25SZXNwb25zZSKvAQoaRGlzYWJsZVN1YnNjcmlwdGlvblJlcXVlc3QSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAEgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRIOCgJpZBgCIAEoCVICaWQSTAoHY29tbWFuZBgDIAEoCzIyLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRGlzYWJsZVN1YnNjcmlwdGlvbkNvbW1hbmRSB2NvbW1hbmQiHQobRGlzYWJsZVN1YnNjcmlwdGlvblJlc3BvbnNlIqwDChlVcGRhdGVTdWJzY3JpcHRpb25SZXF1ZXN0EjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgBIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2USDgoCaWQYAiABKAlSAmlkEmYKGGFkZF9zb3VyY2VfdHlwZXNfY29tbWFuZBgDIAEoCzItLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uQWRkU291cmNlVHlwZXNDb21tYW5kUhVhZGRTb3VyY2VUeXBlc0NvbW1hbmQSbwobZGVsZXRlX3NvdXJjZV90eXBlc19jb21tYW5kGAQgASgLMjAuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5EZWxldGVTb3VyY2VUeXBlc0NvbW1hbmRSGGRlbGV0ZVNvdXJjZVR5cGVzQ29tbWFuZBJxChtyZW5hbWVfc3Vic2NyaXB0aW9uX2NvbW1hbmQYBSABKAsyMS5idWNrZXRlZXIubm90aWZpY2F0aW9uLlJlbmFtZVN1YnNjcmlwdGlvbkNvbW1hbmRSGXJlbmFtZVN1YnNjcmlwdGlvbkNvbW1hbmQiHAoaVXBkYXRlU3Vic2NyaXB0aW9uUmVzcG9uc2UymREKE05vdGlmaWNhdGlvblNlcnZpY2USgwEKFEdldEFkbWluU3Vic2NyaXB0aW9uEjMuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5HZXRBZG1pblN1YnNjcmlwdGlvblJlcXVlc3QaNC5idWNrZXRlZXIubm90aWZpY2F0aW9uLkdldEFkbWluU3Vic2NyaXB0aW9uUmVzcG9uc2UiABKJAQoWTGlzdEFkbWluU3Vic2NyaXB0aW9ucxI1LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uTGlzdEFkbWluU3Vic2NyaXB0aW9uc1JlcXVlc3QaNi5idWNrZXRlZXIubm90aWZpY2F0aW9uLkxpc3RBZG1pblN1YnNjcmlwdGlvbnNSZXNwb25zZSIAEp4BCh1MaXN0RW5hYmxlZEFkbWluU3Vic2NyaXB0aW9ucxI8LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uTGlzdEVuYWJsZWRBZG1pblN1YnNjcmlwdGlvbnNSZXF1ZXN0Gj0uYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5MaXN0RW5hYmxlZEFkbWluU3Vic2NyaXB0aW9uc1Jlc3BvbnNlIgASjAEKF0NyZWF0ZUFkbWluU3Vic2NyaXB0aW9uEjYuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5DcmVhdGVBZG1pblN1YnNjcmlwdGlvblJlcXVlc3QaNy5idWNrZXRlZXIubm90aWZpY2F0aW9uLkNyZWF0ZUFkbWluU3Vic2NyaXB0aW9uUmVzcG9uc2UiABKMAQoXRGVsZXRlQWRtaW5TdWJzY3JpcHRpb24SNi5idWNrZXRlZXIubm90aWZpY2F0aW9uLkRlbGV0ZUFkbWluU3Vic2NyaXB0aW9uUmVxdWVzdBo3LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRGVsZXRlQWRtaW5TdWJzY3JpcHRpb25SZXNwb25zZSIAEowBChdFbmFibGVBZG1pblN1YnNjcmlwdGlvbhI2LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRW5hYmxlQWRtaW5TdWJzY3JpcHRpb25SZXF1ZXN0GjcuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5FbmFibGVBZG1pblN1YnNjcmlwdGlvblJlc3BvbnNlIgASjwEKGERpc2FibGVBZG1pblN1YnNjcmlwdGlvbhI3LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRGlzYWJsZUFkbWluU3Vic2NyaXB0aW9uUmVxdWVzdBo4LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRGlzYWJsZUFkbWluU3Vic2NyaXB0aW9uUmVzcG9uc2UiABKMAQoXVXBkYXRlQWRtaW5TdWJzY3JpcHRpb24SNi5idWNrZXRlZXIubm90aWZpY2F0aW9uLlVwZGF0ZUFkbWluU3Vic2NyaXB0aW9uUmVxdWVzdBo3LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uVXBkYXRlQWRtaW5TdWJzY3JpcHRpb25SZXNwb25zZSIAEnQKD0dldFN1YnNjcmlwdGlvbhIuLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uR2V0U3Vic2NyaXB0aW9uUmVxdWVzdBovLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uR2V0U3Vic2NyaXB0aW9uUmVzcG9uc2UiABJ6ChFMaXN0U3Vic2NyaXB0aW9ucxIwLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uTGlzdFN1YnNjcmlwdGlvbnNSZXF1ZXN0GjEuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5MaXN0U3Vic2NyaXB0aW9uc1Jlc3BvbnNlIgASjwEKGExpc3RFbmFibGVkU3Vic2NyaXB0aW9ucxI3LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uTGlzdEVuYWJsZWRTdWJzY3JpcHRpb25zUmVxdWVzdBo4LmJ1Y2tldGVlci5ub3RpZmljYXRpb24uTGlzdEVuYWJsZWRTdWJzY3JpcHRpb25zUmVzcG9uc2UiABJ9ChJDcmVhdGVTdWJzY3JpcHRpb24SMS5idWNrZXRlZXIubm90aWZpY2F0aW9uLkNyZWF0ZVN1YnNjcmlwdGlvblJlcXVlc3QaMi5idWNrZXRlZXIubm90aWZpY2F0aW9uLkNyZWF0ZVN1YnNjcmlwdGlvblJlc3BvbnNlIgASfQoSRGVsZXRlU3Vic2NyaXB0aW9uEjEuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5EZWxldGVTdWJzY3JpcHRpb25SZXF1ZXN0GjIuYnVja2V0ZWVyLm5vdGlmaWNhdGlvbi5EZWxldGVTdWJzY3JpcHRpb25SZXNwb25zZSIAEn0KEkVuYWJsZVN1YnNjcmlwdGlvbhIxLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRW5hYmxlU3Vic2NyaXB0aW9uUmVxdWVzdBoyLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRW5hYmxlU3Vic2NyaXB0aW9uUmVzcG9uc2UiABKAAQoTRGlzYWJsZVN1YnNjcmlwdGlvbhIyLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uRGlzYWJsZVN1YnNjcmlwdGlvblJlcXVlc3QaMy5idWNrZXRlZXIubm90aWZpY2F0aW9uLkRpc2FibGVTdWJzY3JpcHRpb25SZXNwb25zZSIAEn0KElVwZGF0ZVN1YnNjcmlwdGlvbhIxLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uVXBkYXRlU3Vic2NyaXB0aW9uUmVxdWVzdBoyLmJ1Y2tldGVlci5ub3RpZmljYXRpb24uVXBkYXRlU3Vic2NyaXB0aW9uUmVzcG9uc2UiAEI2WjRnaXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vbm90aWZpY2F0aW9uYgZwcm90bzM=
  pushDescriptor: CtQCChhwcm90by9wdXNoL2NvbW1hbmQucHJvdG8SDmJ1Y2tldGVlci5wdXNoIlsKEUNyZWF0ZVB1c2hDb21tYW5kEh4KC2ZjbV9hcGlfa2V5GAEgASgJUglmY21BcGlLZXkSEgoEdGFncxgCIAMoCVIEdGFncxISCgRuYW1lGAMgASgJUgRuYW1lIigKEkFkZFB1c2hUYWdzQ29tbWFuZBISCgR0YWdzGAEgAygJUgR0YWdzIisKFURlbGV0ZVB1c2hUYWdzQ29tbWFuZBISCgR0YWdzGAEgAygJUgR0YWdzIhMKEURlbGV0ZVB1c2hDb21tYW5kIicKEVJlbmFtZVB1c2hDb21tYW5kEhIKBG5hbWUYASABKAlSBG5hbWVCLlosZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL3B1c2hiBnByb3RvMwqYAgoVcHJvdG8vcHVzaC9wdXNoLnByb3RvEg5idWNrZXRlZXIucHVzaCK2AQoEUHVzaBIOCgJpZBgBIAEoCVICaWQSHgoLZmNtX2FwaV9rZXkYAiABKAlSCWZjbUFwaUtleRISCgR0YWdzGAMgAygJUgR0YWdzEhgKB2RlbGV0ZWQYBCABKAhSB2RlbGV0ZWQSEgoEbmFtZRgFIAEoCVIEbmFtZRIdCgpjcmVhdGVkX2F0GAYgASgDUgljcmVhdGVkQXQSHQoKdXBkYXRlZF9hdBgHIAEoA1IJdXBkYXRlZEF0Qi5aLGdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9wdXNoYgZwcm90bzMK8g0KGHByb3RvL3B1c2gvc2VydmljZS5wcm90bxIOYnVja2V0ZWVyLnB1c2gaFXByb3RvL3B1c2gvcHVzaC5wcm90bxoYcHJvdG8vcHVzaC9jb21tYW5kLnByb3RvIoUBChFDcmVhdGVQdXNoUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEjsKB2NvbW1hbmQYAiABKAsyIS5idWNrZXRlZXIucHVzaC5DcmVhdGVQdXNoQ29tbWFuZFIHY29tbWFuZCIUChJDcmVhdGVQdXNoUmVzcG9uc2UirAMKEUxpc3RQdXNoZXNSZXF1ZXN0EjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgBIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2USGwoJcGFnZV9zaXplGAIgASgDUghwYWdlU2l6ZRIWCgZjdXJzb3IYAyABKAlSBmN1cnNvchJECghvcmRlcl9ieRgEIAEoDjIpLmJ1Y2tldGVlci5wdXNoLkxpc3RQdXNoZXNSZXF1ZXN0Lk9yZGVyQnlSB29yZGVyQnkSWQoPb3JkZXJfZGlyZWN0aW9uGAUgASgOMjAuYnVja2V0ZWVyLnB1c2guTGlzdFB1c2hlc1JlcXVlc3QuT3JkZXJEaXJlY3Rpb25SDm9yZGVyRGlyZWN0aW9uEiUKDnNlYXJjaF9rZXl3b3JkGAYgASgJUg1zZWFyY2hLZXl3b3JkIkAKB09yZGVyQnkSCwoHREVGQVVMVBAAEggKBE5BTUUQARIOCgpDUkVBVEVEX0FUEAISDgoKVVBEQVRFRF9BVBADIiMKDk9yZGVyRGlyZWN0aW9uEgcKA0FTQxAAEggKBERFU0MQASJ7ChJMaXN0UHVzaGVzUmVzcG9uc2USLAoGcHVzaGVzGAEgAygLMhQuYnVja2V0ZWVyLnB1c2guUHVzaFIGcHVzaGVzEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEh8KC3RvdGFsX2NvdW50GAMgASgDUgp0b3RhbENvdW50IpUBChFEZWxldGVQdXNoUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEg4KAmlkGAIgASgJUgJpZBI7Cgdjb21tYW5kGAMgASgLMiEuYnVja2V0ZWVyLnB1c2guRGVsZXRlUHVzaENvbW1hbmRSB2NvbW1hbmQiFAoSRGVsZXRlUHVzaFJlc3BvbnNlIuICChFVcGRhdGVQdXNoUmVxdWVzdBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYASABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEg4KAmlkGAIgASgJUgJpZBJVChVhZGRfcHVzaF90YWdzX2NvbW1hbmQYAyABKAsyIi5idWNrZXRlZXIucHVzaC5BZGRQdXNoVGFnc0NvbW1hbmRSEmFkZFB1c2hUYWdzQ29tbWFuZBJeChhkZWxldGVfcHVzaF90YWdzX2NvbW1hbmQYBCABKAsyJS5idWNrZXRlZXIucHVzaC5EZWxldGVQdXNoVGFnc0NvbW1hbmRSFWRlbGV0ZVB1c2hUYWdzQ29tbWFuZBJRChNyZW5hbWVfcHVzaF9jb21tYW5kGAUgASgLMiEuYnVja2V0ZWVyLnB1c2guUmVuYW1lUHVzaENvbW1hbmRSEXJlbmFtZVB1c2hDb21tYW5kIhQKElVwZGF0ZVB1c2hSZXNwb25zZTLpAgoLUHVzaFNlcnZpY2USVQoKTGlzdFB1c2hlcxIhLmJ1Y2tldGVlci5wdXNoLkxpc3RQdXNoZXNSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guTGlzdFB1c2hlc1Jlc3BvbnNlIgASVQoKQ3JlYXRlUHVzaBIhLmJ1Y2tldGVlci5wdXNoLkNyZWF0ZVB1c2hSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guQ3JlYXRlUHVzaFJlc3BvbnNlIgASVQoKRGVsZXRlUHVzaBIhLmJ1Y2tldGVlci5wdXNoLkRlbGV0ZVB1c2hSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guRGVsZXRlUHVzaFJlc3BvbnNlIgASVQoKVXBkYXRlUHVzaBIhLmJ1Y2tldGVlci5wdXNoLlVwZGF0ZVB1c2hSZXF1ZXN0GiIuYnVja2V0ZWVyLnB1c2guVXBkYXRlUHVzaFJlc3BvbnNlIgBCLlosZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL3B1c2hiBnByb3RvMw==
  batchDescriptor: CtwEChlwcm90by9iYXRjaC9zZXJ2aWNlLnByb3RvEg9idWNrZXRlZXIuYmF0Y2giPgoPQmF0Y2hKb2JSZXF1ZXN0EisKA2pvYhgBIAEoDjIZLmJ1Y2tldGVlci5iYXRjaC5CYXRjaEpvYlIDam9iIhIKEEJhdGNoSm9iUmVzcG9uc2UqtgIKCEJhdGNoSm9iEhsKF0V4cGVyaW1lbnRTdGF0dXNVcGRhdGVyEAASHAoYRXhwZXJpbWVudFJ1bm5pbmdXYXRjaGVyEAESFwoTRmVhdHVyZVN0YWxlV2F0Y2hlchACEhMKD01hdUNvdW50V2F0Y2hlchADEhMKD0RhdGV0aW1lV2F0Y2hlchAEEhUKEUV2ZW50Q291bnRXYXRjaGVyEAUSFwoTRG9tYWluRXZlbnRJbmZvcm1lchAGEhcKE1JlZGlzQ291bnRlckRlbGV0ZXIQBxIdChlQcm9ncmVzc2l2ZVJvbGxvdXRXYXRjaGVyEAgSGAoURXhwZXJpbWVudENhbGN1bGF0b3IQCRIRCg1NYXVTdW1tYXJpemVyEAoSFwoTTWF1UGFydGl0aW9uRGVsZXRlchALMmgKDEJhdGNoU2VydmljZRJYCg9FeGVjdXRlQmF0Y2hKb2ISIC5idWNrZXRlZXIuYmF0Y2guQmF0Y2hKb2JSZXF1ZXN0GiEuYnVja2V0ZWVyLmJhdGNoLkJhdGNoSm9iUmVzcG9uc2UiAEIvWi1naXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vYmF0Y2hiBnByb3RvMw==
  environmentDescriptor: CpsKCh9wcm90by9lbnZpcm9ubWVudC9jb21tYW5kLnByb3RvEhVidWNrZXRlZXIuZW52aXJvbm1lbnQijAEKGkNyZWF0ZUVudmlyb25tZW50VjJDb21tYW5kEhIKBG5hbWUYASABKAlSBG5hbWUSGQoIdXJsX2NvZGUYAiABKAlSB3VybENvZGUSIAoLZGVzY3JpcHRpb24YAyABKAlSC2Rlc2NyaXB0aW9uEh0KCnByb2plY3RfaWQYBCABKAlSCXByb2plY3RJZCIwChpSZW5hbWVFbnZpcm9ubWVudFYyQ29tbWFuZBISCgRuYW1lGAEgASgJUgRuYW1lIkkKJUNoYW5nZURlc2NyaXB0aW9uRW52aXJvbm1lbnRWMkNvbW1hbmQSIAoLZGVzY3JpcHRpb24YASABKAlSC2Rlc2NyaXB0aW9uIh0KG0FyY2hpdmVFbnZpcm9ubWVudFYyQ29tbWFuZCIfCh1VbmFyY2hpdmVFbnZpcm9ubWVudFYyQ29tbWFuZCJ7ChRDcmVhdGVQcm9qZWN0Q29tbWFuZBISCgJpZBgBIAEoCUICGAFSAmlkEiAKC2Rlc2NyaXB0aW9uGAIgASgJUgtkZXNjcmlwdGlvbhISCgRuYW1lGAMgASgJUgRuYW1lEhkKCHVybF9jb2RlGAQgASgJUgd1cmxDb2RlInQKGUNyZWF0ZVRyaWFsUHJvamVjdENvbW1hbmQSEgoCaWQYASABKAlCAhgBUgJpZBIUCgVlbWFpbBgCIAEoCVIFZW1haWwSEgoEbmFtZRgDIAEoCVIEbmFtZRIZCgh1cmxfY29kZRgEIAEoCVIHdXJsQ29kZSIqChRSZW5hbWVQcm9qZWN0Q29tbWFuZBISCgRuYW1lGAEgASgJUgRuYW1lIkMKH0NoYW5nZURlc2NyaXB0aW9uUHJvamVjdENvbW1hbmQSIAoLZGVzY3JpcHRpb24YASABKAlSC2Rlc2NyaXB0aW9uIhYKFEVuYWJsZVByb2plY3RDb21tYW5kIhcKFURpc2FibGVQcm9qZWN0Q29tbWFuZCIcChpDb252ZXJ0VHJpYWxQcm9qZWN0Q29tbWFuZCKHAQoZQ3JlYXRlT3JnYW5pemF0aW9uQ29tbWFuZBISCgRuYW1lGAEgASgJUgRuYW1lEhkKCHVybF9jb2RlGAIgASgJUgd1cmxDb2RlEiAKC2Rlc2NyaXB0aW9uGAMgASgJUgtkZXNjcmlwdGlvbhIZCghpc190cmlhbBgEIAEoCFIHaXNUcmlhbCIzCh1DaGFuZ2VOYW1lT3JnYW5pemF0aW9uQ29tbWFuZBISCgRuYW1lGAEgASgJUgRuYW1lIkgKJENoYW5nZURlc2NyaXB0aW9uT3JnYW5pemF0aW9uQ29tbWFuZBIgCgtkZXNjcmlwdGlvbhgBIAEoCVILZGVzY3JpcHRpb24iGwoZRW5hYmxlT3JnYW5pemF0aW9uQ29tbWFuZCIcChpEaXNhYmxlT3JnYW5pemF0aW9uQ29tbWFuZCIcChpBcmNoaXZlT3JnYW5pemF0aW9uQ29tbWFuZCIeChxVbmFyY2hpdmVPcmdhbml6YXRpb25Db21tYW5kIiEKH0NvbnZlcnRUcmlhbE9yZ2FuaXphdGlvbkNvbW1hbmRCNVozZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2Vudmlyb25tZW50YgZwcm90bzMK5wIKI3Byb3RvL2Vudmlyb25tZW50L2Vudmlyb25tZW50LnByb3RvEhVidWNrZXRlZXIuZW52aXJvbm1lbnQi6QEKDUVudmlyb25tZW50VjISDgoCaWQYASABKAlSAmlkEhIKBG5hbWUYAiABKAlSBG5hbWUSGQoIdXJsX2NvZGUYAyABKAlSB3VybENvZGUSIAoLZGVzY3JpcHRpb24YBCABKAlSC2Rlc2NyaXB0aW9uEh0KCnByb2plY3RfaWQYBSABKAlSCXByb2plY3RJZBIaCghhcmNoaXZlZBgGIAEoCFIIYXJjaGl2ZWQSHQoKY3JlYXRlZF9hdBgHIAEoA1IJY3JlYXRlZEF0Eh0KCnVwZGF0ZWRfYXQYCCABKANSCXVwZGF0ZWRBdEI1WjNnaXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vZW52aXJvbm1lbnRiBnByb3RvMwqfAwokcHJvdG8vZW52aXJvbm1lbnQvb3JnYW5pemF0aW9uLnByb3RvEhVidWNrZXRlZXIuZW52aXJvbm1lbnQioAIKDE9yZ2FuaXphdGlvbhIOCgJpZBgBIAEoCVICaWQSEgoEbmFtZRgCIAEoCVIEbmFtZRIZCgh1cmxfY29kZRgDIAEoCVIHdXJsQ29kZRIgCgtkZXNjcmlwdGlvbhgEIAEoCVILZGVzY3JpcHRpb24SGgoIZGlzYWJsZWQYBSABKAhSCGRpc2FibGVkEhoKCGFyY2hpdmVkGAYgASgIUghhcmNoaXZlZBIUCgV0cmlhbBgHIAEoCFIFdHJpYWwSIwoNY3JlYXRvcl9lbWFpbBgIIAEoCVIMY3JlYXRvckVtYWlsEh0KCmNyZWF0ZWRfYXQYCSABKANSCWNyZWF0ZWRBdBIdCgp1cGRhdGVkX2F0GAogASgDUgl1cGRhdGVkQXRCNVozZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2Vudmlyb25tZW50YgZwcm90bzMK+QIKH3Byb3RvL2Vudmlyb25tZW50L3Byb2plY3QucHJvdG8SFWJ1Y2tldGVlci5lbnZpcm9ubWVudCL/AQoHUHJvamVjdBIOCgJpZBgBIAEoCVICaWQSIAoLZGVzY3JpcHRpb24YAiABKAlSC2Rlc2NyaXB0aW9uEhoKCGRpc2FibGVkGAMgASgIUghkaXNhYmxlZBIUCgV0cmlhbBgEIAEoCFIFdHJpYWwSIwoNY3JlYXRvcl9lbWFpbBgFIAEoCVIMY3JlYXRvckVtYWlsEh0KCmNyZWF0ZWRfYXQYBiABKANSCWNyZWF0ZWRBdBIdCgp1cGRhdGVkX2F0GAcgASgDUgl1cGRhdGVkQXQSEgoEbmFtZRgIIAEoCVIEbmFtZRIZCgh1cmxfY29kZRgJIAEoCVIHdXJsQ29kZUI1WjNnaXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vZW52aXJvbm1lbnRiBnByb3RvMwqGBAoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvEg9nb29nbGUucHJvdG9idWYiIwoLRG91YmxlVmFsdWUSFAoFdmFsdWUYASABKAFSBXZhbHVlIiIKCkZsb2F0VmFsdWUSFAoFdmFsdWUYASABKAJSBXZhbHVlIiIKCkludDY0VmFsdWUSFAoFdmFsdWUYASABKANSBXZhbHVlIiMKC1VJbnQ2NFZhbHVlEhQKBXZhbHVlGAEgASgEUgV2YWx1ZSIiCgpJbnQzMlZhbHVlEhQKBXZhbHVlGAEgASgFUgV2YWx1ZSIjCgtVSW50MzJWYWx1ZRIUCgV2YWx1ZRgBIAEoDVIFdmFsdWUiIQoJQm9vbFZhbHVlEhQKBXZhbHVlGAEgASgIUgV2YWx1ZSIjCgtTdHJpbmdWYWx1ZRIUCgV2YWx1ZRgBIAEoCVIFdmFsdWUiIgoKQnl0ZXNWYWx1ZRIUCgV2YWx1ZRgBIAEoDFIFdmFsdWVCgwEKE2NvbS5nb29nbGUucHJvdG9idWZCDVdyYXBwZXJzUHJvdG9QAVoxZ29vZ2xlLmdvbGFuZy5vcmcvcHJvdG9idWYvdHlwZXMva25vd24vd3JhcHBlcnNwYvgBAaICA0dQQqoCHkdvb2dsZS5Qcm90b2J1Zi5XZWxsS25vd25UeXBlc2IGcHJvdG8zCqpDCh9wcm90by9lbnZpcm9ubWVudC9zZXJ2aWNlLnByb3RvEhVidWNrZXRlZXIuZW52aXJvbm1lbnQaHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxojcHJvdG8vZW52aXJvbm1lbnQvZW52aXJvbm1lbnQucHJvdG8aH3Byb3RvL2Vudmlyb25tZW50L3Byb2plY3QucHJvdG8aJHByb3RvL2Vudmlyb25tZW50L29yZ2FuaXphdGlvbi5wcm90bxofcHJvdG8vZW52aXJvbm1lbnQvY29tbWFuZC5wcm90byIpChdHZXRFbnZpcm9ubWVudFYyUmVxdWVzdBIOCgJpZBgBIAEoCVICaWQiYgoYR2V0RW52aXJvbm1lbnRWMlJlc3BvbnNlEkYKC2Vudmlyb25tZW50GAEgASgLMiQuYnVja2V0ZWVyLmVudmlyb25tZW50LkVudmlyb25tZW50VjJSC2Vudmlyb25tZW50IooEChlMaXN0RW52aXJvbm1lbnRzVjJSZXF1ZXN0EhsKCXBhZ2Vfc2l6ZRgBIAEoA1IIcGFnZVNpemUSFgoGY3Vyc29yGAIgASgJUgZjdXJzb3ISUwoIb3JkZXJfYnkYAyABKA4yOC5idWNrZXRlZXIuZW52aXJvbm1lbnQuTGlzdEVudmlyb25tZW50c1YyUmVxdWVzdC5PcmRlckJ5UgdvcmRlckJ5EmgKD29yZGVyX2RpcmVjdGlvbhgEIAEoDjI/LmJ1Y2tldGVlci5lbnZpcm9ubWVudC5MaXN0RW52aXJvbm1lbnRzVjJSZXF1ZXN0Lk9yZGVyRGlyZWN0aW9uUg5vcmRlckRpcmVjdGlvbhIdCgpwcm9qZWN0X2lkGAUgASgJUglwcm9qZWN0SWQSNgoIYXJjaGl2ZWQYBiABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlUghhcmNoaXZlZBIlCg5zZWFyY2hfa2V5d29yZBgHIAEoCVINc2VhcmNoS2V5d29yZCJWCgdPcmRlckJ5EgsKB0RFRkFVTFQQABIGCgJJRBABEggKBE5BTUUQAhIMCghVUkxfQ09ERRADEg4KCkNSRUFURURfQVQQBBIOCgpVUERBVEVEX0FUEAUiIwoOT3JkZXJEaXJlY3Rpb24SBwoDQVNDEAASCAoEREVTQxABIp8BChpMaXN0RW52aXJvbm1lbnRzVjJSZXNwb25zZRJICgxlbnZpcm9ubWVudHMYASADKAsyJC5idWNrZXRlZXIuZW52aXJvbm1lbnQuRW52aXJvbm1lbnRWMlIMZW52aXJvbm1lbnRzEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEh8KC3RvdGFsX2NvdW50GAMgASgDUgp0b3RhbENvdW50ImkKGkNyZWF0ZUVudmlyb25tZW50VjJSZXF1ZXN0EksKB2NvbW1hbmQYASABKAsyMS5idWNrZXRlZXIuZW52aXJvbm1lbnQuQ3JlYXRlRW52aXJvbm1lbnRWMkNvbW1hbmRSB2NvbW1hbmQiZQobQ3JlYXRlRW52aXJvbm1lbnRWMlJlc3BvbnNlEkYKC2Vudmlyb25tZW50GAEgASgLMiQuYnVja2V0ZWVyLmVudmlyb25tZW50LkVudmlyb25tZW50VjJSC2Vudmlyb25tZW50IoICChpVcGRhdGVFbnZpcm9ubWVudFYyUmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSWAoOcmVuYW1lX2NvbW1hbmQYAiABKAsyMS5idWNrZXRlZXIuZW52aXJvbm1lbnQuUmVuYW1lRW52aXJvbm1lbnRWMkNvbW1hbmRSDXJlbmFtZUNvbW1hbmQSegoaY2hhbmdlX2Rlc2NyaXB0aW9uX2NvbW1hbmQYAyABKAsyPC5idWNrZXRlZXIuZW52aXJvbm1lbnQuQ2hhbmdlRGVzY3JpcHRpb25FbnZpcm9ubWVudFYyQ29tbWFuZFIYY2hhbmdlRGVzY3JpcHRpb25Db21tYW5kIh0KG1VwZGF0ZUVudmlyb25tZW50VjJSZXNwb25zZSJ7ChtBcmNoaXZlRW52aXJvbm1lbnRWMlJlcXVlc3QSDgoCaWQYASABKAlSAmlkEkwKB2NvbW1hbmQYAiABKAsyMi5idWNrZXRlZXIuZW52aXJvbm1lbnQuQXJjaGl2ZUVudmlyb25tZW50VjJDb21tYW5kUgdjb21tYW5kIh4KHEFyY2hpdmVFbnZpcm9ubWVudFYyUmVzcG9uc2UifwodVW5hcmNoaXZlRW52aXJvbm1lbnRWMlJlcXVlc3QSDgoCaWQYASABKAlSAmlkEk4KB2NvbW1hbmQYAiABKAsyNC5idWNrZXRlZXIuZW52aXJvbm1lbnQuVW5hcmNoaXZlRW52aXJvbm1lbnRWMkNvbW1hbmRSB2NvbW1hbmQiIAoeVW5hcmNoaXZlRW52aXJvbm1lbnRWMlJlc3BvbnNlIiMKEUdldFByb2plY3RSZXF1ZXN0Eg4KAmlkGAEgASgJUgJpZCJOChJHZXRQcm9qZWN0UmVzcG9uc2USOAoHcHJvamVjdBgBIAEoCzIeLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5Qcm9qZWN0Ugdwcm9qZWN0ItkDChNMaXN0UHJvamVjdHNSZXF1ZXN0EhsKCXBhZ2Vfc2l6ZRgBIAEoA1IIcGFnZVNpemUSFgoGY3Vyc29yGAIgASgJUgZjdXJzb3ISTQoIb3JkZXJfYnkYAyABKA4yMi5idWNrZXRlZXIuZW52aXJvbm1lbnQuTGlzdFByb2plY3RzUmVxdWVzdC5PcmRlckJ5UgdvcmRlckJ5EmIKD29yZGVyX2RpcmVjdGlvbhgEIAEoDjI5LmJ1Y2tldGVlci5lbnZpcm9ubWVudC5MaXN0UHJvamVjdHNSZXF1ZXN0Lk9yZGVyRGlyZWN0aW9uUg5vcmRlckRpcmVjdGlvbhIlCg5zZWFyY2hfa2V5d29yZBgFIAEoCVINc2VhcmNoS2V5d29yZBI2CghkaXNhYmxlZBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVSCGRpc2FibGVkIlYKB09yZGVyQnkSCwoHREVGQVVMVBAAEgYKAklEEAESDgoKQ1JFQVRFRF9BVBACEg4KClVQREFURURfQVQQAxIICgROQU1FEAQSDAoIVVJMX0NPREUQBSIjCg5PcmRlckRpcmVjdGlvbhIHCgNBU0MQABIICgRERVNDEAEiiwEKFExpc3RQcm9qZWN0c1Jlc3BvbnNlEjoKCHByb2plY3RzGAEgAygLMh4uYnVja2V0ZWVyLmVudmlyb25tZW50LlByb2plY3RSCHByb2plY3RzEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEh8KC3RvdGFsX2NvdW50GAMgASgDUgp0b3RhbENvdW50Il0KFENyZWF0ZVByb2plY3RSZXF1ZXN0EkUKB2NvbW1hbmQYASABKAsyKy5idWNrZXRlZXIuZW52aXJvbm1lbnQuQ3JlYXRlUHJvamVjdENvbW1hbmRSB2NvbW1hbmQiUQoVQ3JlYXRlUHJvamVjdFJlc3BvbnNlEjgKB3Byb2plY3QYASABKAsyHi5idWNrZXRlZXIuZW52aXJvbm1lbnQuUHJvamVjdFIHcHJvamVjdCJnChlDcmVhdGVUcmlhbFByb2plY3RSZXF1ZXN0EkoKB2NvbW1hbmQYASABKAsyMC5idWNrZXRlZXIuZW52aXJvbm1lbnQuQ3JlYXRlVHJpYWxQcm9qZWN0Q29tbWFuZFIHY29tbWFuZCIcChpDcmVhdGVUcmlhbFByb2plY3RSZXNwb25zZSLwAQoUVXBkYXRlUHJvamVjdFJlcXVlc3QSDgoCaWQYASABKAlSAmlkEnQKGmNoYW5nZV9kZXNjcmlwdGlvbl9jb21tYW5kGAIgASgLMjYuYnVja2V0ZWVyLmVudmlyb25tZW50LkNoYW5nZURlc2NyaXB0aW9uUHJvamVjdENvbW1hbmRSGGNoYW5nZURlc2NyaXB0aW9uQ29tbWFuZBJSCg5yZW5hbWVfY29tbWFuZBgDIAEoCzIrLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5SZW5hbWVQcm9qZWN0Q29tbWFuZFINcmVuYW1lQ29tbWFuZCIXChVVcGRhdGVQcm9qZWN0UmVzcG9uc2UibQoURW5hYmxlUHJvamVjdFJlcXVlc3QSDgoCaWQYASABKAlSAmlkEkUKB2NvbW1hbmQYAiABKAsyKy5idWNrZXRlZXIuZW52aXJvbm1lbnQuRW5hYmxlUHJvamVjdENvbW1hbmRSB2NvbW1hbmQiFwoVRW5hYmxlUHJvamVjdFJlc3BvbnNlIm8KFURpc2FibGVQcm9qZWN0UmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSRgoHY29tbWFuZBgCIAEoCzIsLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5EaXNhYmxlUHJvamVjdENvbW1hbmRSB2NvbW1hbmQiGAoWRGlzYWJsZVByb2plY3RSZXNwb25zZSJ5ChpDb252ZXJ0VHJpYWxQcm9qZWN0UmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSSwoHY29tbWFuZBgCIAEoCzIxLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5Db252ZXJ0VHJpYWxQcm9qZWN0Q29tbWFuZFIHY29tbWFuZCIdChtDb252ZXJ0VHJpYWxQcm9qZWN0UmVzcG9uc2UiKAoWR2V0T3JnYW5pemF0aW9uUmVxdWVzdBIOCgJpZBgBIAEoCVICaWQiYgoXR2V0T3JnYW5pemF0aW9uUmVzcG9uc2USRwoMb3JnYW5pemF0aW9uGAEgASgLMiMuYnVja2V0ZWVyLmVudmlyb25tZW50Lk9yZ2FuaXphdGlvblIMb3JnYW5pemF0aW9uIugDChhMaXN0T3JnYW5pemF0aW9uc1JlcXVlc3QSGwoJcGFnZV9zaXplGAEgASgDUghwYWdlU2l6ZRIWCgZjdXJzb3IYAiABKAlSBmN1cnNvchJSCghvcmRlcl9ieRgDIAEoDjI3LmJ1Y2tldGVlci5lbnZpcm9ubWVudC5MaXN0T3JnYW5pemF0aW9uc1JlcXVlc3QuT3JkZXJCeVIHb3JkZXJCeRJnCg9vcmRlcl9kaXJlY3Rpb24YBCABKA4yPi5idWNrZXRlZXIuZW52aXJvbm1lbnQuTGlzdE9yZ2FuaXphdGlvbnNSZXF1ZXN0Lk9yZGVyRGlyZWN0aW9uUg5vcmRlckRpcmVjdGlvbhIlCg5zZWFyY2hfa2V5d29yZBgFIAEoCVINc2VhcmNoS2V5d29yZBI2CghkaXNhYmxlZBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVSCGRpc2FibGVkIlYKB09yZGVyQnkSCwoHREVGQVVMVBAAEgYKAklEEAESDgoKQ1JFQVRFRF9BVBACEg4KClVQREFURURfQVQQAxIICgROQU1FEAQSDAoIVVJMX0NPREUQBSIjCg5PcmRlckRpcmVjdGlvbhIHCgNBU0MQABIICgRERVNDEAEinwEKGUxpc3RPcmdhbml6YXRpb25zUmVzcG9uc2USSQoNT3JnYW5pemF0aW9ucxgBIAMoCzIjLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5Pcmdhbml6YXRpb25SDU9yZ2FuaXphdGlvbnMSFgoGY3Vyc29yGAIgASgJUgZjdXJzb3ISHwoLdG90YWxfY291bnQYAyABKANSCnRvdGFsQ291bnQiZwoZQ3JlYXRlT3JnYW5pemF0aW9uUmVxdWVzdBJKCgdjb21tYW5kGAEgASgLMjAuYnVja2V0ZWVyLmVudmlyb25tZW50LkNyZWF0ZU9yZ2FuaXphdGlvbkNvbW1hbmRSB2NvbW1hbmQiZQoaQ3JlYXRlT3JnYW5pemF0aW9uUmVzcG9uc2USRwoMT3JnYW5pemF0aW9uGAEgASgLMiMuYnVja2V0ZWVyLmVudmlyb25tZW50Lk9yZ2FuaXphdGlvblIMT3JnYW5pemF0aW9uIoMCChlVcGRhdGVPcmdhbml6YXRpb25SZXF1ZXN0Eg4KAmlkGAEgASgJUgJpZBJbCg5yZW5hbWVfY29tbWFuZBgCIAEoCzI0LmJ1Y2tldGVlci5lbnZpcm9ubWVudC5DaGFuZ2VOYW1lT3JnYW5pemF0aW9uQ29tbWFuZFINcmVuYW1lQ29tbWFuZBJ5ChpjaGFuZ2VfZGVzY3JpcHRpb25fY29tbWFuZBgDIAEoCzI7LmJ1Y2tldGVlci5lbnZpcm9ubWVudC5DaGFuZ2VEZXNjcmlwdGlvbk9yZ2FuaXphdGlvbkNvbW1hbmRSGGNoYW5nZURlc2NyaXB0aW9uQ29tbWFuZCIcChpVcGRhdGVPcmdhbml6YXRpb25SZXNwb25zZSJ3ChlFbmFibGVPcmdhbml6YXRpb25SZXF1ZXN0Eg4KAmlkGAEgASgJUgJpZBJKCgdjb21tYW5kGAIgASgLMjAuYnVja2V0ZWVyLmVudmlyb25tZW50LkVuYWJsZU9yZ2FuaXphdGlvbkNvbW1hbmRSB2NvbW1hbmQiHAoaRW5hYmxlT3JnYW5pemF0aW9uUmVzcG9uc2UieQoaRGlzYWJsZU9yZ2FuaXphdGlvblJlcXVlc3QSDgoCaWQYASABKAlSAmlkEksKB2NvbW1hbmQYAiABKAsyMS5idWNrZXRlZXIuZW52aXJvbm1lbnQuRGlzYWJsZU9yZ2FuaXphdGlvbkNvbW1hbmRSB2NvbW1hbmQiHQobRGlzYWJsZU9yZ2FuaXphdGlvblJlc3BvbnNlInkKGkFyY2hpdmVPcmdhbml6YXRpb25SZXF1ZXN0Eg4KAmlkGAEgASgJUgJpZBJLCgdjb21tYW5kGAIgASgLMjEuYnVja2V0ZWVyLmVudmlyb25tZW50LkFyY2hpdmVPcmdhbml6YXRpb25Db21tYW5kUgdjb21tYW5kIh0KG0FyY2hpdmVPcmdhbml6YXRpb25SZXNwb25zZSJ9ChxVbmFyY2hpdmVPcmdhbml6YXRpb25SZXF1ZXN0Eg4KAmlkGAEgASgJUgJpZBJNCgdjb21tYW5kGAIgASgLMjMuYnVja2V0ZWVyLmVudmlyb25tZW50LlVuYXJjaGl2ZU9yZ2FuaXphdGlvbkNvbW1hbmRSB2NvbW1hbmQiHwodVW5hcmNoaXZlT3JnYW5pemF0aW9uUmVzcG9uc2UigwEKH0NvbnZlcnRUcmlhbE9yZ2FuaXphdGlvblJlcXVlc3QSDgoCaWQYASABKAlSAmlkElAKB2NvbW1hbmQYAiABKAsyNi5idWNrZXRlZXIuZW52aXJvbm1lbnQuQ29udmVydFRyaWFsT3JnYW5pemF0aW9uQ29tbWFuZFIHY29tbWFuZCIiCiBDb252ZXJ0VHJpYWxPcmdhbml6YXRpb25SZXNwb25zZTKaFgoSRW52aXJvbm1lbnRTZXJ2aWNlEnUKEEdldEVudmlyb25tZW50VjISLi5idWNrZXRlZXIuZW52aXJvbm1lbnQuR2V0RW52aXJvbm1lbnRWMlJlcXVlc3QaLy5idWNrZXRlZXIuZW52aXJvbm1lbnQuR2V0RW52aXJvbm1lbnRWMlJlc3BvbnNlIgASewoSTGlzdEVudmlyb25tZW50c1YyEjAuYnVja2V0ZWVyLmVudmlyb25tZW50Lkxpc3RFbnZpcm9ubWVudHNWMlJlcXVlc3QaMS5idWNrZXRlZXIuZW52aXJvbm1lbnQuTGlzdEVudmlyb25tZW50c1YyUmVzcG9uc2UiABJ+ChNDcmVhdGVFbnZpcm9ubWVudFYyEjEuYnVja2V0ZWVyLmVudmlyb25tZW50LkNyZWF0ZUVudmlyb25tZW50VjJSZXF1ZXN0GjIuYnVja2V0ZWVyLmVudmlyb25tZW50LkNyZWF0ZUVudmlyb25tZW50VjJSZXNwb25zZSIAEn4KE1VwZGF0ZUVudmlyb25tZW50VjISMS5idWNrZXRlZXIuZW52aXJvbm1lbnQuVXBkYXRlRW52aXJvbm1lbnRWMlJlcXVlc3QaMi5idWNrZXRlZXIuZW52aXJvbm1lbnQuVXBkYXRlRW52aXJvbm1lbnRWMlJlc3BvbnNlIgASgQEKFEFyY2hpdmVFbnZpcm9ubWVudFYyEjIuYnVja2V0ZWVyLmVudmlyb25tZW50LkFyY2hpdmVFbnZpcm9ubWVudFYyUmVxdWVzdBozLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5BcmNoaXZlRW52aXJvbm1lbnRWMlJlc3BvbnNlIgAShwEKFlVuYXJjaGl2ZUVudmlyb25tZW50VjISNC5idWNrZXRlZXIuZW52aXJvbm1lbnQuVW5hcmNoaXZlRW52aXJvbm1lbnRWMlJlcXVlc3QaNS5idWNrZXRlZXIuZW52aXJvbm1lbnQuVW5hcmNoaXZlRW52aXJvbm1lbnRWMlJlc3BvbnNlIgASYwoKR2V0UHJvamVjdBIoLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5HZXRQcm9qZWN0UmVxdWVzdBopLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5HZXRQcm9qZWN0UmVzcG9uc2UiABJpCgxMaXN0UHJvamVjdHMSKi5idWNrZXRlZXIuZW52aXJvbm1lbnQuTGlzdFByb2plY3RzUmVxdWVzdBorLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5MaXN0UHJvamVjdHNSZXNwb25zZSIAEmwKDUNyZWF0ZVByb2plY3QSKy5idWNrZXRlZXIuZW52aXJvbm1lbnQuQ3JlYXRlUHJvamVjdFJlcXVlc3QaLC5idWNrZXRlZXIuZW52aXJvbm1lbnQuQ3JlYXRlUHJvamVjdFJlc3BvbnNlIgASewoSQ3JlYXRlVHJpYWxQcm9qZWN0EjAuYnVja2V0ZWVyLmVudmlyb25tZW50LkNyZWF0ZVRyaWFsUHJvamVjdFJlcXVlc3QaMS5idWNrZXRlZXIuZW52aXJvbm1lbnQuQ3JlYXRlVHJpYWxQcm9qZWN0UmVzcG9uc2UiABJsCg1VcGRhdGVQcm9qZWN0EisuYnVja2V0ZWVyLmVudmlyb25tZW50LlVwZGF0ZVByb2plY3RSZXF1ZXN0GiwuYnVja2V0ZWVyLmVudmlyb25tZW50LlVwZGF0ZVByb2plY3RSZXNwb25zZSIAEmwKDUVuYWJsZVByb2plY3QSKy5idWNrZXRlZXIuZW52aXJvbm1lbnQuRW5hYmxlUHJvamVjdFJlcXVlc3QaLC5idWNrZXRlZXIuZW52aXJvbm1lbnQuRW5hYmxlUHJvamVjdFJlc3BvbnNlIgASbwoORGlzYWJsZVByb2plY3QSLC5idWNrZXRlZXIuZW52aXJvbm1lbnQuRGlzYWJsZVByb2plY3RSZXF1ZXN0Gi0uYnVja2V0ZWVyLmVudmlyb25tZW50LkRpc2FibGVQcm9qZWN0UmVzcG9uc2UiABJ+ChNDb252ZXJ0VHJpYWxQcm9qZWN0EjEuYnVja2V0ZWVyLmVudmlyb25tZW50LkNvbnZlcnRUcmlhbFByb2plY3RSZXF1ZXN0GjIuYnVja2V0ZWVyLmVudmlyb25tZW50LkNvbnZlcnRUcmlhbFByb2plY3RSZXNwb25zZSIAEnIKD0dldE9yZ2FuaXphdGlvbhItLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5HZXRPcmdhbml6YXRpb25SZXF1ZXN0Gi4uYnVja2V0ZWVyLmVudmlyb25tZW50LkdldE9yZ2FuaXphdGlvblJlc3BvbnNlIgASeAoRTGlzdE9yZ2FuaXphdGlvbnMSLy5idWNrZXRlZXIuZW52aXJvbm1lbnQuTGlzdE9yZ2FuaXphdGlvbnNSZXF1ZXN0GjAuYnVja2V0ZWVyLmVudmlyb25tZW50Lkxpc3RPcmdhbml6YXRpb25zUmVzcG9uc2UiABJ7ChJDcmVhdGVPcmdhbml6YXRpb24SMC5idWNrZXRlZXIuZW52aXJvbm1lbnQuQ3JlYXRlT3JnYW5pemF0aW9uUmVxdWVzdBoxLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5DcmVhdGVPcmdhbml6YXRpb25SZXNwb25zZSIAEnsKElVwZGF0ZU9yZ2FuaXphdGlvbhIwLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5VcGRhdGVPcmdhbml6YXRpb25SZXF1ZXN0GjEuYnVja2V0ZWVyLmVudmlyb25tZW50LlVwZGF0ZU9yZ2FuaXphdGlvblJlc3BvbnNlIgASewoSRW5hYmxlT3JnYW5pemF0aW9uEjAuYnVja2V0ZWVyLmVudmlyb25tZW50LkVuYWJsZU9yZ2FuaXphdGlvblJlcXVlc3QaMS5idWNrZXRlZXIuZW52aXJvbm1lbnQuRW5hYmxlT3JnYW5pemF0aW9uUmVzcG9uc2UiABJ+ChNEaXNhYmxlT3JnYW5pemF0aW9uEjEuYnVja2V0ZWVyLmVudmlyb25tZW50LkRpc2FibGVPcmdhbml6YXRpb25SZXF1ZXN0GjIuYnVja2V0ZWVyLmVudmlyb25tZW50LkRpc2FibGVPcmdhbml6YXRpb25SZXNwb25zZSIAEn4KE0FyY2hpdmVPcmdhbml6YXRpb24SMS5idWNrZXRlZXIuZW52aXJvbm1lbnQuQXJjaGl2ZU9yZ2FuaXphdGlvblJlcXVlc3QaMi5idWNrZXRlZXIuZW52aXJvbm1lbnQuQXJjaGl2ZU9yZ2FuaXphdGlvblJlc3BvbnNlIgAShAEKFVVuYXJjaGl2ZU9yZ2FuaXphdGlvbhIzLmJ1Y2tldGVlci5lbnZpcm9ubWVudC5VbmFyY2hpdmVPcmdhbml6YXRpb25SZXF1ZXN0GjQuYnVja2V0ZWVyLmVudmlyb25tZW50LlVuYXJjaGl2ZU9yZ2FuaXphdGlvblJlc3BvbnNlIgASjQEKGENvbnZlcnRUcmlhbE9yZ2FuaXphdGlvbhI2LmJ1Y2tldGVlci5lbnZpcm9ubWVudC5Db252ZXJ0VHJpYWxPcmdhbml6YXRpb25SZXF1ZXN0GjcuYnVja2V0ZWVyLmVudmlyb25tZW50LkNvbnZlcnRUcmlhbE9yZ2FuaXphdGlvblJlc3BvbnNlIgBCNVozZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2Vudmlyb25tZW50YgZwcm90bzM=
  experimentDescriptor: 
  featureDescriptor: 
  accountDescriptor: CucCCiNwcm90by9lbnZpcm9ubWVudC9lbnZpcm9ubWVudC5wcm90bxIVYnVja2V0ZWVyLmVudmlyb25tZW50IukBCg1FbnZpcm9ubWVudFYyEg4KAmlkGAEgASgJUgJpZBISCgRuYW1lGAIgASgJUgRuYW1lEhkKCHVybF9jb2RlGAMgASgJUgd1cmxDb2RlEiAKC2Rlc2NyaXB0aW9uGAQgASgJUgtkZXNjcmlwdGlvbhIdCgpwcm9qZWN0X2lkGAUgASgJUglwcm9qZWN0SWQSGgoIYXJjaGl2ZWQYBiABKAhSCGFyY2hpdmVkEh0KCmNyZWF0ZWRfYXQYByABKANSCWNyZWF0ZWRBdBIdCgp1cGRhdGVkX2F0GAggASgDUgl1cGRhdGVkQXRCNVozZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2Vudmlyb25tZW50YgZwcm90bzMKnAUKG3Byb3RvL2FjY291bnQvYWNjb3VudC5wcm90bxIRYnVja2V0ZWVyLmFjY291bnQaI3Byb3RvL2Vudmlyb25tZW50L2Vudmlyb25tZW50LnByb3RvIqcCCgdBY2NvdW50Eg4KAmlkGAEgASgJUgJpZBIUCgVlbWFpbBgCIAEoCVIFZW1haWwSEgoEbmFtZRgDIAEoCVIEbmFtZRIzCgRyb2xlGAQgASgOMh8uYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudC5Sb2xlUgRyb2xlEhoKCGRpc2FibGVkGAUgASgIUghkaXNhYmxlZBIdCgpjcmVhdGVkX2F0GAYgASgDUgljcmVhdGVkQXQSHQoKdXBkYXRlZF9hdBgHIAEoA1IJdXBkYXRlZEF0EhgKB2RlbGV0ZWQYCCABKAhSB2RlbGV0ZWQiOQoEUm9sZRIKCgZWSUVXRVIQABIKCgZFRElUT1IQARIJCgVPV05FUhACEg4KClVOQVNTSUdORUQQYyLfAQoRRW52aXJvbm1lbnRSb2xlVjISRgoLZW52aXJvbm1lbnQYASABKAsyJC5idWNrZXRlZXIuZW52aXJvbm1lbnQuRW52aXJvbm1lbnRWMlILZW52aXJvbm1lbnQSMwoEcm9sZRgCIAEoDjIfLmJ1Y2tldGVlci5hY2NvdW50LkFjY291bnQuUm9sZVIEcm9sZRIjCg10cmlhbF9wcm9qZWN0GAMgASgIUgx0cmlhbFByb2plY3QSKAoQdHJpYWxfc3RhcnRlZF9hdBgEIAEoA1IOdHJpYWxTdGFydGVkQXRCMVovZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2FjY291bnRiBnByb3RvMwqXBAobcHJvdG8vYWNjb3VudC9hcGlfa2V5LnByb3RvEhFidWNrZXRlZXIuYWNjb3VudCLYAQoGQVBJS2V5Eg4KAmlkGAEgASgJUgJpZBISCgRuYW1lGAIgASgJUgRuYW1lEjIKBHJvbGUYAyABKA4yHi5idWNrZXRlZXIuYWNjb3VudC5BUElLZXkuUm9sZVIEcm9sZRIaCghkaXNhYmxlZBgEIAEoCFIIZGlzYWJsZWQSHQoKY3JlYXRlZF9hdBgFIAEoA1IJY3JlYXRlZEF0Eh0KCnVwZGF0ZWRfYXQYBiABKANSCXVwZGF0ZWRBdCIcCgRSb2xlEgcKA1NESxAAEgsKB1NFUlZJQ0UQASLOAQoRRW52aXJvbm1lbnRBUElLZXkSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAEgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRIyCgdhcGlfa2V5GAIgASgLMhkuYnVja2V0ZWVyLmFjY291bnQuQVBJS2V5UgZhcGlLZXkSMQoUZW52aXJvbm1lbnRfZGlzYWJsZWQYAyABKAhSE2Vudmlyb25tZW50RGlzYWJsZWQSHQoKcHJvamVjdF9pZBgEIAEoCVIJcHJvamVjdElkQjFaL2dpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9hY2NvdW50YgZwcm90bzMK5gUKG3Byb3RvL2FjY291bnQvY29tbWFuZC5wcm90bxIRYnVja2V0ZWVyLmFjY291bnQaG3Byb3RvL2FjY291bnQvYWNjb3VudC5wcm90bxobcHJvdG8vYWNjb3VudC9hcGlfa2V5LnByb3RvIjEKGUNyZWF0ZUFkbWluQWNjb3VudENvbW1hbmQSFAoFZW1haWwYASABKAlSBWVtYWlsIhsKGUVuYWJsZUFkbWluQWNjb3VudENvbW1hbmQiHAoaRGlzYWJsZUFkbWluQWNjb3VudENvbW1hbmQiFwoVQ29udmVydEFjY291bnRDb21tYW5kIhYKFERlbGV0ZUFjY291bnRDb21tYW5kImEKFENyZWF0ZUFjY291bnRDb21tYW5kEhQKBWVtYWlsGAEgASgJUgVlbWFpbBIzCgRyb2xlGAIgASgOMh8uYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudC5Sb2xlUgRyb2xlIk8KGENoYW5nZUFjY291bnRSb2xlQ29tbWFuZBIzCgRyb2xlGAEgASgOMh8uYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudC5Sb2xlUgRyb2xlIhYKFEVuYWJsZUFjY291bnRDb21tYW5kIhcKFURpc2FibGVBY2NvdW50Q29tbWFuZCJdChNDcmVhdGVBUElLZXlDb21tYW5kEhIKBG5hbWUYASABKAlSBG5hbWUSMgoEcm9sZRgCIAEoDjIeLmJ1Y2tldGVlci5hY2NvdW50LkFQSUtleS5Sb2xlUgRyb2xlIi0KF0NoYW5nZUFQSUtleU5hbWVDb21tYW5kEhIKBG5hbWUYASABKAlSBG5hbWUiFQoTRW5hYmxlQVBJS2V5Q29tbWFuZCIWChREaXNhYmxlQVBJS2V5Q29tbWFuZEIxWi9naXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vYWNjb3VudGIGcHJvdG8zCoYECh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8SD2dvb2dsZS5wcm90b2J1ZiIjCgtEb3VibGVWYWx1ZRIUCgV2YWx1ZRgBIAEoAVIFdmFsdWUiIgoKRmxvYXRWYWx1ZRIUCgV2YWx1ZRgBIAEoAlIFdmFsdWUiIgoKSW50NjRWYWx1ZRIUCgV2YWx1ZRgBIAEoA1IFdmFsdWUiIwoLVUludDY0VmFsdWUSFAoFdmFsdWUYASABKARSBXZhbHVlIiIKCkludDMyVmFsdWUSFAoFdmFsdWUYASABKAVSBXZhbHVlIiMKC1VJbnQzMlZhbHVlEhQKBXZhbHVlGAEgASgNUgV2YWx1ZSIhCglCb29sVmFsdWUSFAoFdmFsdWUYASABKAhSBXZhbHVlIiMKC1N0cmluZ1ZhbHVlEhQKBXZhbHVlGAEgASgJUgV2YWx1ZSIiCgpCeXRlc1ZhbHVlEhQKBXZhbHVlGAEgASgMUgV2YWx1ZUKDAQoTY29tLmdvb2dsZS5wcm90b2J1ZkINV3JhcHBlcnNQcm90b1ABWjFnb29nbGUuZ29sYW5nLm9yZy9wcm90b2J1Zi90eXBlcy9rbm93bi93cmFwcGVyc3Bi+AEBogIDR1BCqgIeR29vZ2xlLlByb3RvYnVmLldlbGxLbm93blR5cGVzYgZwcm90bzMKpzkKG3Byb3RvL2FjY291bnQvc2VydmljZS5wcm90bxIRYnVja2V0ZWVyLmFjY291bnQaHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxobcHJvdG8vYWNjb3VudC9hY2NvdW50LnByb3RvGhtwcm90by9hY2NvdW50L2FwaV9rZXkucHJvdG8aG3Byb3RvL2FjY291bnQvY29tbWFuZC5wcm90byIQCg5HZXRNZVYyUmVxdWVzdCItChVHZXRNZUJ5RW1haWxWMlJlcXVlc3QSFAoFZW1haWwYASABKAlSBWVtYWlsIpUBCg9HZXRNZVYyUmVzcG9uc2USFAoFZW1haWwYASABKAlSBWVtYWlsEhkKCGlzX2FkbWluGAIgASgIUgdpc0FkbWluElEKEWVudmlyb25tZW50X3JvbGVzGAMgAygLMiQuYnVja2V0ZWVyLmFjY291bnQuRW52aXJvbm1lbnRSb2xlVjJSEGVudmlyb25tZW50Um9sZXMiYwoZQ3JlYXRlQWRtaW5BY2NvdW50UmVxdWVzdBJGCgdjb21tYW5kGAEgASgLMiwuYnVja2V0ZWVyLmFjY291bnQuQ3JlYXRlQWRtaW5BY2NvdW50Q29tbWFuZFIHY29tbWFuZCIcChpDcmVhdGVBZG1pbkFjY291bnRSZXNwb25zZSJzChlFbmFibGVBZG1pbkFjY291bnRSZXF1ZXN0Eg4KAmlkGAEgASgJUgJpZBJGCgdjb21tYW5kGAIgASgLMiwuYnVja2V0ZWVyLmFjY291bnQuRW5hYmxlQWRtaW5BY2NvdW50Q29tbWFuZFIHY29tbWFuZCIcChpFbmFibGVBZG1pbkFjY291bnRSZXNwb25zZSJ1ChpEaXNhYmxlQWRtaW5BY2NvdW50UmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSRwoHY29tbWFuZBgCIAEoCzItLmJ1Y2tldGVlci5hY2NvdW50LkRpc2FibGVBZG1pbkFjY291bnRDb21tYW5kUgdjb21tYW5kIh0KG0Rpc2FibGVBZG1pbkFjY291bnRSZXNwb25zZSIuChZHZXRBZG1pbkFjY291bnRSZXF1ZXN0EhQKBWVtYWlsGAEgASgJUgVlbWFpbCJPChdHZXRBZG1pbkFjY291bnRSZXNwb25zZRI0CgdhY2NvdW50GAEgASgLMhouYnVja2V0ZWVyLmFjY291bnQuQWNjb3VudFIHYWNjb3VudCLLAwoYTGlzdEFkbWluQWNjb3VudHNSZXF1ZXN0EhsKCXBhZ2Vfc2l6ZRgBIAEoA1IIcGFnZVNpemUSFgoGY3Vyc29yGAIgASgJUgZjdXJzb3ISTgoIb3JkZXJfYnkYAyABKA4yMy5idWNrZXRlZXIuYWNjb3VudC5MaXN0QWRtaW5BY2NvdW50c1JlcXVlc3QuT3JkZXJCeVIHb3JkZXJCeRJjCg9vcmRlcl9kaXJlY3Rpb24YBCABKA4yOi5idWNrZXRlZXIuYWNjb3VudC5MaXN0QWRtaW5BY2NvdW50c1JlcXVlc3QuT3JkZXJEaXJlY3Rpb25SDm9yZGVyRGlyZWN0aW9uEiUKDnNlYXJjaF9rZXl3b3JkGAUgASgJUg1zZWFyY2hLZXl3b3JkEjYKCGRpc2FibGVkGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZVIIZGlzYWJsZWQiQQoHT3JkZXJCeRILCgdERUZBVUxUEAASCQoFRU1BSUwQARIOCgpDUkVBVEVEX0FUEAISDgoKVVBEQVRFRF9BVBADIiMKDk9yZGVyRGlyZWN0aW9uEgcKA0FTQxAAEggKBERFU0MQASKMAQoZTGlzdEFkbWluQWNjb3VudHNSZXNwb25zZRI2CghhY2NvdW50cxgBIAMoCzIaLmJ1Y2tldGVlci5hY2NvdW50LkFjY291bnRSCGFjY291bnRzEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEh8KC3RvdGFsX2NvdW50GAMgASgDUgp0b3RhbENvdW50ImsKFUNvbnZlcnRBY2NvdW50UmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSQgoHY29tbWFuZBgCIAEoCzIoLmJ1Y2tldGVlci5hY2NvdW50LkNvbnZlcnRBY2NvdW50Q29tbWFuZFIHY29tbWFuZCIYChZDb252ZXJ0QWNjb3VudFJlc3BvbnNlIo4BChRDcmVhdGVBY2NvdW50UmVxdWVzdBJBCgdjb21tYW5kGAEgASgLMicuYnVja2V0ZWVyLmFjY291bnQuQ3JlYXRlQWNjb3VudENvbW1hbmRSB2NvbW1hbmQSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAIgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZSIXChVDcmVhdGVBY2NvdW50UmVzcG9uc2UingEKFEVuYWJsZUFjY291bnRSZXF1ZXN0Eg4KAmlkGAEgASgJUgJpZBJBCgdjb21tYW5kGAIgASgLMicuYnVja2V0ZWVyLmFjY291bnQuRW5hYmxlQWNjb3VudENvbW1hbmRSB2NvbW1hbmQSMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAMgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZSIXChVFbmFibGVBY2NvdW50UmVzcG9uc2UioAEKFURpc2FibGVBY2NvdW50UmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSQgoHY29tbWFuZBgCIAEoCzIoLmJ1Y2tldGVlci5hY2NvdW50LkRpc2FibGVBY2NvdW50Q29tbWFuZFIHY29tbWFuZBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYAyABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlIhgKFkRpc2FibGVBY2NvdW50UmVzcG9uc2UipgEKGENoYW5nZUFjY291bnRSb2xlUmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSRQoHY29tbWFuZBgCIAEoCzIrLmJ1Y2tldGVlci5hY2NvdW50LkNoYW5nZUFjY291bnRSb2xlQ29tbWFuZFIHY29tbWFuZBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYAyABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlIhsKGUNoYW5nZUFjY291bnRSb2xlUmVzcG9uc2UiXgoRR2V0QWNjb3VudFJlcXVlc3QSFAoFZW1haWwYASABKAlSBWVtYWlsEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgCIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2UiSgoSR2V0QWNjb3VudFJlc3BvbnNlEjQKB2FjY291bnQYASABKAsyGi5idWNrZXRlZXIuYWNjb3VudC5BY2NvdW50UgdhY2NvdW50IqIEChNMaXN0QWNjb3VudHNSZXF1ZXN0EhsKCXBhZ2Vfc2l6ZRgBIAEoA1IIcGFnZVNpemUSFgoGY3Vyc29yGAIgASgJUgZjdXJzb3ISMwoVZW52aXJvbm1lbnRfbmFtZXNwYWNlGAMgASgJUhRlbnZpcm9ubWVudE5hbWVzcGFjZRJJCghvcmRlcl9ieRgEIAEoDjIuLmJ1Y2tldGVlci5hY2NvdW50Lkxpc3RBY2NvdW50c1JlcXVlc3QuT3JkZXJCeVIHb3JkZXJCeRJeCg9vcmRlcl9kaXJlY3Rpb24YBSABKA4yNS5idWNrZXRlZXIuYWNjb3VudC5MaXN0QWNjb3VudHNSZXF1ZXN0Lk9yZGVyRGlyZWN0aW9uUg5vcmRlckRpcmVjdGlvbhIlCg5zZWFyY2hfa2V5d29yZBgGIAEoCVINc2VhcmNoS2V5d29yZBI2CghkaXNhYmxlZBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVSCGRpc2FibGVkEi8KBHJvbGUYCCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZVIEcm9sZSJBCgdPcmRlckJ5EgsKB0RFRkFVTFQQABIJCgVFTUFJTBABEg4KCkNSRUFURURfQVQQAhIOCgpVUERBVEVEX0FUEAMiIwoOT3JkZXJEaXJlY3Rpb24SBwoDQVNDEAASCAoEREVTQxABIocBChRMaXN0QWNjb3VudHNSZXNwb25zZRI2CghhY2NvdW50cxgBIAMoCzIaLmJ1Y2tldGVlci5hY2NvdW50LkFjY291bnRSCGFjY291bnRzEhYKBmN1cnNvchgCIAEoCVIGY3Vyc29yEh8KC3RvdGFsX2NvdW50GAMgASgDUgp0b3RhbENvdW50IowBChNDcmVhdGVBUElLZXlSZXF1ZXN0EkAKB2NvbW1hbmQYASABKAsyJi5idWNrZXRlZXIuYWNjb3VudC5DcmVhdGVBUElLZXlDb21tYW5kUgdjb21tYW5kEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgCIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2UiSgoUQ3JlYXRlQVBJS2V5UmVzcG9uc2USMgoHYXBpX2tleRgBIAEoCzIZLmJ1Y2tldGVlci5hY2NvdW50LkFQSUtleVIGYXBpS2V5IqQBChdDaGFuZ2VBUElLZXlOYW1lUmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSRAoHY29tbWFuZBgCIAEoCzIqLmJ1Y2tldGVlci5hY2NvdW50LkNoYW5nZUFQSUtleU5hbWVDb21tYW5kUgdjb21tYW5kEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgDIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2UiGgoYQ2hhbmdlQVBJS2V5TmFtZVJlc3BvbnNlIpwBChNFbmFibGVBUElLZXlSZXF1ZXN0Eg4KAmlkGAEgASgJUgJpZBJACgdjb21tYW5kGAIgASgLMiYuYnVja2V0ZWVyLmFjY291bnQuRW5hYmxlQVBJS2V5Q29tbWFuZFIHY29tbWFuZBIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYAyABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlIhYKFEVuYWJsZUFQSUtleVJlc3BvbnNlIp4BChREaXNhYmxlQVBJS2V5UmVxdWVzdBIOCgJpZBgBIAEoCVICaWQSQQoHY29tbWFuZBgCIAEoCzInLmJ1Y2tldGVlci5hY2NvdW50LkRpc2FibGVBUElLZXlDb21tYW5kUgdjb21tYW5kEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgDIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2UiFwoVRGlzYWJsZUFQSUtleVJlc3BvbnNlIlcKEEdldEFQSUtleVJlcXVlc3QSDgoCaWQYASABKAlSAmlkEjMKFWVudmlyb25tZW50X25hbWVzcGFjZRgCIAEoCVIUZW52aXJvbm1lbnROYW1lc3BhY2UiRwoRR2V0QVBJS2V5UmVzcG9uc2USMgoHYXBpX2tleRgBIAEoCzIZLmJ1Y2tldGVlci5hY2NvdW50LkFQSUtleVIGYXBpS2V5Iu0DChJMaXN0QVBJS2V5c1JlcXVlc3QSGwoJcGFnZV9zaXplGAEgASgDUghwYWdlU2l6ZRIWCgZjdXJzb3IYAiABKAlSBmN1cnNvchIzChVlbnZpcm9ubWVudF9uYW1lc3BhY2UYAyABKAlSFGVudmlyb25tZW50TmFtZXNwYWNlEkgKCG9yZGVyX2J5GAQgASgOMi0uYnVja2V0ZWVyLmFjY291bnQuTGlzdEFQSUtleXNSZXF1ZXN0Lk9yZGVyQnlSB29yZGVyQnkSXQoPb3JkZXJfZGlyZWN0aW9uGAUgASgOMjQuYnVja2V0ZWVyLmFjY291bnQuTGlzdEFQSUtleXNSZXF1ZXN0Lk9yZGVyRGlyZWN0aW9uUg5vcmRlckRpcmVjdGlvbhIlCg5zZWFyY2hfa2V5d29yZBgGIAEoCVINc2VhcmNoS2V5d29yZBI2CghkaXNhYmxlZBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVSCGRpc2FibGVkIkAKB09yZGVyQnkSCwoHREVGQVVMVBAAEggKBE5BTUUQARIOCgpDUkVBVEVEX0FUEAISDgoKVVBEQVRFRF9BVBADIiMKDk9yZGVyRGlyZWN0aW9uEgcKA0FTQxAAEggKBERFU0MQASKEAQoTTGlzdEFQSUtleXNSZXNwb25zZRI0CghhcGlfa2V5cxgBIAMoCzIZLmJ1Y2tldGVlci5hY2NvdW50LkFQSUtleVIHYXBpS2V5cxIWCgZjdXJzb3IYAiABKAlSBmN1cnNvchIfCgt0b3RhbF9jb3VudBgDIAEoA1IKdG90YWxDb3VudCI8CipHZXRBUElLZXlCeVNlYXJjaGluZ0FsbEVudmlyb25tZW50c1JlcXVlc3QSDgoCaWQYASABKAlSAmlkIoMBCitHZXRBUElLZXlCeVNlYXJjaGluZ0FsbEVudmlyb25tZW50c1Jlc3BvbnNlElQKE2Vudmlyb25tZW50X2FwaV9rZXkYASABKAsyJC5idWNrZXRlZXIuYWNjb3VudC5FbnZpcm9ubWVudEFQSUtleVIRZW52aXJvbm1lbnRBcGlLZXkyqhEKDkFjY291bnRTZXJ2aWNlElAKB0dldE1lVjISIS5idWNrZXRlZXIuYWNjb3VudC5HZXRNZVYyUmVxdWVzdBoiLmJ1Y2tldGVlci5hY2NvdW50LkdldE1lVjJSZXNwb25zZRJeCg5HZXRNZUJ5RW1haWxWMhIoLmJ1Y2tldGVlci5hY2NvdW50LkdldE1lQnlFbWFpbFYyUmVxdWVzdBoiLmJ1Y2tldGVlci5hY2NvdW50LkdldE1lVjJSZXNwb25zZRJxChJDcmVhdGVBZG1pbkFjY291bnQSLC5idWNrZXRlZXIuYWNjb3VudC5DcmVhdGVBZG1pbkFjY291bnRSZXF1ZXN0Gi0uYnVja2V0ZWVyLmFjY291bnQuQ3JlYXRlQWRtaW5BY2NvdW50UmVzcG9uc2UScQoSRW5hYmxlQWRtaW5BY2NvdW50EiwuYnVja2V0ZWVyLmFjY291bnQuRW5hYmxlQWRtaW5BY2NvdW50UmVxdWVzdBotLmJ1Y2tldGVlci5hY2NvdW50LkVuYWJsZUFkbWluQWNjb3VudFJlc3BvbnNlEnQKE0Rpc2FibGVBZG1pbkFjY291bnQSLS5idWNrZXRlZXIuYWNjb3VudC5EaXNhYmxlQWRtaW5BY2NvdW50UmVxdWVzdBouLmJ1Y2tldGVlci5hY2NvdW50LkRpc2FibGVBZG1pbkFjY291bnRSZXNwb25zZRJoCg9HZXRBZG1pbkFjY291bnQSKS5idWNrZXRlZXIuYWNjb3VudC5HZXRBZG1pbkFjY291bnRSZXF1ZXN0GiouYnVja2V0ZWVyLmFjY291bnQuR2V0QWRtaW5BY2NvdW50UmVzcG9uc2USbgoRTGlzdEFkbWluQWNjb3VudHMSKy5idWNrZXRlZXIuYWNjb3VudC5MaXN0QWRtaW5BY2NvdW50c1JlcXVlc3QaLC5idWNrZXRlZXIuYWNjb3VudC5MaXN0QWRtaW5BY2NvdW50c1Jlc3BvbnNlEmUKDkNvbnZlcnRBY2NvdW50EiguYnVja2V0ZWVyLmFjY291bnQuQ29udmVydEFjY291bnRSZXF1ZXN0GikuYnVja2V0ZWVyLmFjY291bnQuQ29udmVydEFjY291bnRSZXNwb25zZRJiCg1DcmVhdGVBY2NvdW50EicuYnVja2V0ZWVyLmFjY291bnQuQ3JlYXRlQWNjb3VudFJlcXVlc3QaKC5idWNrZXRlZXIuYWNjb3VudC5DcmVhdGVBY2NvdW50UmVzcG9uc2USYgoNRW5hYmxlQWNjb3VudBInLmJ1Y2tldGVlci5hY2NvdW50LkVuYWJsZUFjY291bnRSZXF1ZXN0GiguYnVja2V0ZWVyLmFjY291bnQuRW5hYmxlQWNjb3VudFJlc3BvbnNlEmUKDkRpc2FibGVBY2NvdW50EiguYnVja2V0ZWVyLmFjY291bnQuRGlzYWJsZUFjY291bnRSZXF1ZXN0GikuYnVja2V0ZWVyLmFjY291bnQuRGlzYWJsZUFjY291bnRSZXNwb25zZRJuChFDaGFuZ2VBY2NvdW50Um9sZRIrLmJ1Y2tldGVlci5hY2NvdW50LkNoYW5nZUFjY291bnRSb2xlUmVxdWVzdBosLmJ1Y2tldGVlci5hY2NvdW50LkNoYW5nZUFjY291bnRSb2xlUmVzcG9uc2USWQoKR2V0QWNjb3VudBIkLmJ1Y2tldGVlci5hY2NvdW50LkdldEFjY291bnRSZXF1ZXN0GiUuYnVja2V0ZWVyLmFjY291bnQuR2V0QWNjb3VudFJlc3BvbnNlEl8KDExpc3RBY2NvdW50cxImLmJ1Y2tldGVlci5hY2NvdW50Lkxpc3RBY2NvdW50c1JlcXVlc3QaJy5idWNrZXRlZXIuYWNjb3VudC5MaXN0QWNjb3VudHNSZXNwb25zZRJfCgxDcmVhdGVBUElLZXkSJi5idWNrZXRlZXIuYWNjb3VudC5DcmVhdGVBUElLZXlSZXF1ZXN0GicuYnVja2V0ZWVyLmFjY291bnQuQ3JlYXRlQVBJS2V5UmVzcG9uc2USawoQQ2hhbmdlQVBJS2V5TmFtZRIqLmJ1Y2tldGVlci5hY2NvdW50LkNoYW5nZUFQSUtleU5hbWVSZXF1ZXN0GisuYnVja2V0ZWVyLmFjY291bnQuQ2hhbmdlQVBJS2V5TmFtZVJlc3BvbnNlEl8KDEVuYWJsZUFQSUtleRImLmJ1Y2tldGVlci5hY2NvdW50LkVuYWJsZUFQSUtleVJlcXVlc3QaJy5idWNrZXRlZXIuYWNjb3VudC5FbmFibGVBUElLZXlSZXNwb25zZRJiCg1EaXNhYmxlQVBJS2V5EicuYnVja2V0ZWVyLmFjY291bnQuRGlzYWJsZUFQSUtleVJlcXVlc3QaKC5idWNrZXRlZXIuYWNjb3VudC5EaXNhYmxlQVBJS2V5UmVzcG9uc2USVgoJR2V0QVBJS2V5EiMuYnVja2V0ZWVyLmFjY291bnQuR2V0QVBJS2V5UmVxdWVzdBokLmJ1Y2tldGVlci5hY2NvdW50LkdldEFQSUtleVJlc3BvbnNlElwKC0xpc3RBUElLZXlzEiUuYnVja2V0ZWVyLmFjY291bnQuTGlzdEFQSUtleXNSZXF1ZXN0GiYuYnVja2V0ZWVyLmFjY291bnQuTGlzdEFQSUtleXNSZXNwb25zZRKkAQojR2V0QVBJS2V5QnlTZWFyY2hpbmdBbGxFbnZpcm9ubWVudHMSPS5idWNrZXRlZXIuYWNjb3VudC5HZXRBUElLZXlCeVNlYXJjaGluZ0FsbEVudmlyb25tZW50c1JlcXVlc3QaPi5idWNrZXRlZXIuYWNjb3VudC5HZXRBUElLZXlCeVNlYXJjaGluZ0FsbEVudmlyb25tZW50c1Jlc3BvbnNlQjFaL2dpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9hY2NvdW50YgZwcm90bzM=
  migrationDescriptor: CqwECiNwcm90by9taWdyYXRpb24vbXlzcWxfc2VydmljZS5wcm90bxITYnVja2V0ZWVyLm1pZ3JhdGlvbiIfCh1NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVxdWVzdCIgCh5NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVzcG9uc2UiMQobUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXF1ZXN0EhIKBHN0ZXAYASABKANSBHN0ZXAiHgocUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXNwb25zZTKcAgoVTWlncmF0aW9uTXlTUUxTZXJ2aWNlEoMBChZNaWdyYXRlQWxsTWFzdGVyU2NoZW1hEjIuYnVja2V0ZWVyLm1pZ3JhdGlvbi5NaWdyYXRlQWxsTWFzdGVyU2NoZW1hUmVxdWVzdBozLmJ1Y2tldGVlci5taWdyYXRpb24uTWlncmF0ZUFsbE1hc3RlclNjaGVtYVJlc3BvbnNlIgASfQoUUm9sbGJhY2tNYXN0ZXJTY2hlbWESMC5idWNrZXRlZXIubWlncmF0aW9uLlJvbGxiYWNrTWFzdGVyU2NoZW1hUmVxdWVzdBoxLmJ1Y2tldGVlci5taWdyYXRpb24uUm9sbGJhY2tNYXN0ZXJTY2hlbWFSZXNwb25zZSIAQjNaMWdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9taWdyYXRpb25iBnByb3RvMw==
  experimentcalculatorDescriptor: CtYBCh1wcm90by9mZWF0dXJlL3ZhcmlhdGlvbi5wcm90bxIRYnVja2V0ZWVyLmZlYXR1cmUiZwoJVmFyaWF0aW9uEg4KAmlkGAEgASgJUgJpZBIUCgV2YWx1ZRgCIAEoCVIFdmFsdWUSEgoEbmFtZRgDIAEoCVIEbmFtZRIgCgtkZXNjcmlwdGlvbhgEIAEoCVILZGVzY3JpcHRpb25CMVovZ2l0aHViLmNvbS9idWNrZXRlZXItaW8vYnVja2V0ZWVyL3Byb3RvL2ZlYXR1cmViBnByb3RvMwq8BwohcHJvdG8vZXhwZXJpbWVudC9leHBlcmltZW50LnByb3RvEhRidWNrZXRlZXIuZXhwZXJpbWVudBodcHJvdG8vZmVhdHVyZS92YXJpYXRpb24ucHJvdG8i0AUKCkV4cGVyaW1lbnQSDgoCaWQYASABKAlSAmlkEhsKB2dvYWxfaWQYAiABKAlCAhgBUgZnb2FsSWQSHQoKZmVhdHVyZV9pZBgDIAEoCVIJZmVhdHVyZUlkEicKD2ZlYXR1cmVfdmVyc2lvbhgEIAEoBVIOZmVhdHVyZVZlcnNpb24SPAoKdmFyaWF0aW9ucxgFIAMoCzIcLmJ1Y2tldGVlci5mZWF0dXJlLlZhcmlhdGlvblIKdmFyaWF0aW9ucxIZCghzdGFydF9hdBgGIAEoA1IHc3RhcnRBdBIXCgdzdG9wX2F0GAcgASgDUgZzdG9wQXQSHAoHc3RvcHBlZBgIIAEoCEICGAFSB3N0b3BwZWQSIQoKc3RvcHBlZF9hdBgJIAEoA0ICMAFSCXN0b3BwZWRBdBIdCgpjcmVhdGVkX2F0GAogASgDUgljcmVhdGVkQXQSHQoKdXBkYXRlZF9hdBgLIAEoA1IJdXBkYXRlZEF0EhgKB2RlbGV0ZWQYDCABKAhSB2RlbGV0ZWQSGQoIZ29hbF9pZHMYDSADKAlSB2dvYWxJZHMSEgoEbmFtZRgOIAEoCVIEbmFtZRIgCgtkZXNjcmlwdGlvbhgPIAEoCVILZGVzY3JpcHRpb24SKgoRYmFzZV92YXJpYXRpb25faWQYECABKAlSD2Jhc2VWYXJpYXRpb25JZBI/CgZzdGF0dXMYEiABKA4yJy5idWNrZXRlZXIuZXhwZXJpbWVudC5FeHBlcmltZW50LlN0YXR1c1IGc3RhdHVzEh4KCm1haW50YWluZXIYEyABKAlSCm1haW50YWluZXISGgoIYXJjaGl2ZWQYFCABKAhSCGFyY2hpdmVkIkIKBlN0YXR1cxILCgdXQUlUSU5HEAASCwoHUlVOTklORxABEgsKB1NUT1BQRUQQAhIRCg1GT1JDRV9TVE9QUEVEEANKBAgREBIiUQoLRXhwZXJpbWVudHMSQgoLZXhwZXJpbWVudHMYASADKAsyIC5idWNrZXRlZXIuZXhwZXJpbWVudC5FeHBlcmltZW50UgtleHBlcmltZW50c0I0WjJnaXRodWIuY29tL2J1Y2tldGVlci1pby9idWNrZXRlZXIvcHJvdG8vZXhwZXJpbWVudGIGcHJvdG8zCuADCihwcm90by9leHBlcmltZW50Y2FsY3VsYXRvci9zZXJ2aWNlLnByb3RvEh5idWNrZXRlZXIuZXhwZXJpbWVudGNhbGN1bGF0b3IaIXByb3RvL2V4cGVyaW1lbnQvZXhwZXJpbWVudC5wcm90byJ7ChBCYXRjaENhbGNSZXF1ZXN0EiUKDmVudmlyb25tZW50X2lkGAEgASgJUg1lbnZpcm9ubWVudElkEkAKCmV4cGVyaW1lbnQYAiABKAsyIC5idWNrZXRlZXIuZXhwZXJpbWVudC5FeHBlcmltZW50UgpleHBlcmltZW50IhMKEUJhdGNoQ2FsY1Jlc3BvbnNlMpYBChtFeHBlcmltZW50Q2FsY3VsYXRvclNlcnZpY2USdwoOQ2FsY0V4cGVyaW1lbnQSMC5idWNrZXRlZXIuZXhwZXJpbWVudGNhbGN1bGF0b3IuQmF0Y2hDYWxjUmVxdWVzdBoxLmJ1Y2tldGVlci5leHBlcmltZW50Y2FsY3VsYXRvci5CYXRjaENhbGNSZXNwb25zZSIAQj5aPGdpdGh1Yi5jb20vYnVja2V0ZWVyLWlvL2J1Y2tldGVlci9wcm90by9leHBlcmltZW50Y2FsY3VsYXRvcmIGcHJvdG8z
  auditlogDescriptor: 
service:
  externalPort: 9000
ingress:
  host:
  staticIPName:
health:
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 3
    failureThreshold: 5
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 3
    failureThreshold: 2
resources: {}
affinity: {}
nodeSelector: {}
pdb:
  enabled:
  maxUnavailable: 50%
hpa:
  enabled:
  minReplicas:
  maxReplicas:
  metrics:
    cpu:
      targetAverageUtilization:
tolerations: []
serviceAccount:
  annotations: {}
